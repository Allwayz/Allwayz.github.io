<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java基础-0x07:学习阻塞队列</title>
    <url>/2020/05/29/Java%E5%9F%BA%E7%A1%80-0x07-%E5%AD%A6%E4%B9%A0%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h1 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h1><h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><blockquote>
<p>  队列与阻塞队列</p>
<ul>
<li><p>阻塞队列,顾名思义 首先它是一个<strong>队列</strong>，而一个阻塞队列在数据结构中起到的作用大致如图所示好：</p>
<p><img src="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/publicImage/Java%E5%9F%BA%E7%A1%80-0x00%EF%BC%9A%E5%AD%A6%E4%B9%A0Volatile/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E6%A8%A1%E5%9E%8B.png" alt="s"></p>
</li>
<li><p>当阻塞队列是<strong>空</strong>时，从队列中<strong><u>获取元素</u></strong>的操作会被阻塞。（消费者）</p>
</li>
<li><p>当阻塞队列是<strong>满</strong>时，向队列中<u><strong>添加元素</strong></u>的操作会被阻塞。（生产者）</p>
</li>
</ul>
</blockquote>
<a id="more"></a>



<p>在多线程领域，所谓阻塞，在某些情况下会挂起线程（即阻塞），一旦条件满足，被挂起的线程又会被自动唤醒。</p>
<ul>
<li><input disabled="" type="checkbox"> <p>为什么需要BlockingQueue？</p>
<p>好处是不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，因为这写事<code>BlockingQueue</code>都做了</p>
<p>在<strong>concurrent</strong>包发布以前，多线程环境下，开发者都需要自己控制这些细节，还需要兼顾效率和线程安全。而这会给我们的程序带来更多的复杂度。</p>
</li>
</ul>
<h3 id="阻塞队列接口基础架构"><a href="#阻塞队列接口基础架构" class="headerlink" title="阻塞队列接口基础架构"></a>阻塞队列接口基础架构</h3><p><img src="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/publicImage/Java%E5%9F%BA%E7%A1%80-0x00%EF%BC%9A%E5%AD%A6%E4%B9%A0Volatile/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png" alt="屏幕快照 2020-05-29 15.45.21"></p>
<p>阻塞队列接口也是集合类接口的子接口。</p>
<p>其实现类有一下几个：</p>
<ul>
<li><strong><u>ArrayBlockingQueue ==&gt; 由数组结构组成的有届阻塞队列</u></strong></li>
<li><u><strong>LinkedBlockingQueue ==&gt; 由链表结构组成的有届（但大小默认值为Integer.MAX_VALUE）阻塞队列</strong></u></li>
<li>PriorityBlockingQueue ==&gt; 支持优先级排序的无届阻塞队列</li>
<li>DelayQueue ==&gt; 使用优先级队列实现的延迟无届阻塞队列</li>
<li><u><strong>SynchronousQueue ==&gt; 不存储元素的阻塞队列，也即单个元素的队列</strong></u></li>
<li>LinkedTransferQueue ==&gt; 由链表结构组成的无届阻塞队列</li>
<li>LinkedBlockingDeque ==&gt; 由链表结构组成的双向阻塞队列</li>
</ul>
<h3 id="阻塞队列主要方法的概括："><a href="#阻塞队列主要方法的概括：" class="headerlink" title="阻塞队列主要方法的概括："></a>阻塞队列主要方法的概括：</h3><table>
<thead>
<tr>
<th></th>
<th><em>Throws exception</em></th>
<th><em>Special value</em></th>
<th><em>Blocks</em></th>
<th><em>Times out</em></th>
</tr>
</thead>
<tbody><tr>
<td><strong>Insert</strong></td>
<td><a href="#"><code>add(e)</code></a></td>
<td><a href="#"><code>offer(e)</code></a></td>
<td><a href="#"><code>put(e)</code></a></td>
<td><a href="#"><code>offer(e, time, unit)</code></a></td>
</tr>
<tr>
<td><strong>Remove</strong></td>
<td><a href="#"><code>remove()</code></a></td>
<td><a href="#"><code>poll()</code></a></td>
<td><a href="#"><code>take()</code></a></td>
<td><a href="#"><code>poll(time, unit)</code></a></td>
</tr>
<tr>
<td><strong>Examine</strong></td>
<td><a href="#"><code>element()</code></a></td>
<td><a href="#"><code>peek()</code></a></td>
<td><em>not applicable</em></td>
<td><em>not applicable</em></td>
</tr>
</tbody></table>
<p>BlockingQueue不接受空元素。实现类会在尝试添加、放置或提供<code>null</code>时抛出<code>NullPointerException</code>。空值用作标记值，以指示轮询操作失败。</p>
<p>BlockingQueue可能受容量限制。在任何给定时间，它可能具有剩余容量，超过该容量就不能放置其他元素而不会阻塞。没有任何内部容量约束的<code>BlockingQueue</code>始终报告<code>Integer.MAX_VALUE</code>的剩余容量。</p>
<p>BlockingQueue实现被设计为主要用于生产者-消费者队列，但另外还支持<strong>Collection</strong>接口。因此，例如，可以使用<code>remove(x)</code>从队列中删除任意元素。但是，这样的操作通常不能非常有效地执行，并且仅用于偶尔的使用，例如当取消排队的消息时。</p>
<p>BlockingQueue实现是线程安全的。所有排队方法都是使用内部锁或其他形式的并发控制来原子地实现其效果的。但是，除非在实现中另外指定，否则批量Collection操作addAll，containsAll，retainAll和removeAll不一定是原子执行的。因此，例如，仅在c中添加一些元素之后，addAll（c）可能会失败（引发异常）。</p>
<p>BlockingQueue本质上不支持任何类型的“close”或“shutdown”操作，以指示将不再添加任何项目。这些功能的需求和使用往往取决于实现。例如，一种常见的策略是，生产者插入特殊的流尾对象或有毒对象，当消费者采取这种方法时会对其进行相应的解释。</p>
<p>使用示例，基于典型的生产者-消费者方案。请注意，BlockingQueue可以安全地与多个生产者和多个消费者一起使用。</p>
<h3 id="SynchronousQueue理论："><a href="#SynchronousQueue理论：" class="headerlink" title="SynchronousQueue理论："></a>SynchronousQueue理论：</h3><p>与其他的阻塞队列不同，SynchronousQueue是一个不存储元素的阻塞队列</p>
<p>每一个put操作必须等待一个take操作，反过来也是一样。</p>
<h4 id="SynchronousQueueDemo："><a href="#SynchronousQueueDemo：" class="headerlink" title="SynchronousQueueDemo："></a>SynchronousQueueDemo：</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingQueueDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        BlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> SynchronousQueue&lt;&gt;();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"\t put 1"</span>);</span><br><span class="line">                queue.put(<span class="string">"1"</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"\t put 2"</span>);</span><br><span class="line">                queue.put(<span class="string">"2"</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"\t put 3"</span>);</span><br><span class="line">                queue.put(<span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                System.out.println(queue.take());</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                System.out.println(queue.take());</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                System.out.println(queue.take());</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">Thread-0	 put 2</span><br><span class="line">2</span><br><span class="line">Thread-0	 put 3</span><br><span class="line">3</span><br></pre></td></tr></table></figure></div>

<p>放一个，取一个，下一个才能放进来。</p>
]]></content>
      <tags>
        <tag>JUC</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础-0x06:CountDownLatch/CyclicBarrier/Semaphore的使用</title>
    <url>/2020/05/29/Java%E5%9F%BA%E7%A1%80-0x06-CountDownLatch-CyclicBarrier-Semaphore%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><img src="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/publicImage/Java%E5%9F%BA%E7%A1%80-0x00%EF%BC%9A%E5%AD%A6%E4%B9%A0Volatile/ce10d55fe7857c41c61101e4d13cccaa.jpg" alt="s"></p>
<h1 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h1><h2 id="CountDownLatch-CyclicBarrier-Semaphore-如何使用"><a href="#CountDownLatch-CyclicBarrier-Semaphore-如何使用" class="headerlink" title="CountDownLatch/CyclicBarrier/Semaphore 如何使用"></a>CountDownLatch/CyclicBarrier/Semaphore 如何使用</h2><blockquote>
<ul>
<li>CountDownLatch（闭锁）</li>
<li>CyclicBarrier（栅栏）</li>
<li>Semaphore（信号量）</li>
</ul>
</blockquote>
<a id="more"></a>

<h3 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h3><p>A <code>CountDownLatch</code> is initialized with a given <em>count</em>. The <code>await</code> methods block until the current count reaches zero due to invocations of the <code>countDown()</code> method, after which all waiting threads are released and any subsequent invocations of <code>await</code> return immediately.</p>
<p>用给定的计数初始化闭锁。 由于count down方法的调用，await方法将阻塞到当前计数为零为止。之后，释放所有等待的线程，并立即返回任何后续的“await”调用。</p>
<p>使用的是<code>CountDownLatch.countDown()</code>+<code>CountDownLatch.await()</code>两个方法。</p>
<p>小Demo：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"\t 国被灭"</span>);</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;,CountryEnum.forEach_CountryEnum(i).getMessage()).start();</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"\t Down..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Enum类：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> CountryEnum &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 国家名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ONE(<span class="number">1</span>,<span class="string">"齐"</span>),TWO(<span class="number">2</span>,<span class="string">"楚"</span>),THREE(<span class="number">3</span>,<span class="string">"燕"</span>),FORE(<span class="number">4</span>,<span class="string">"赵"</span>),FIVE(<span class="number">5</span>,<span class="string">"魏"</span>),SIX(<span class="number">6</span>,<span class="string">"韩"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Getter</span> <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="meta">@Getter</span> <span class="keyword">private</span> String message;</span><br><span class="line">    </span><br><span class="line">    CountryEnum(Integer code,String message)&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CountryEnum <span class="title">forEach_CountryEnum</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        CountryEnum[] myArray = CountryEnum.values();</span><br><span class="line">        <span class="keyword">for</span>(CountryEnum countryEnum:myArray)&#123;</span><br><span class="line">            <span class="keyword">if</span>(index == countryEnum.getCode())&#123;</span><br><span class="line">                <span class="keyword">return</span> countryEnum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>当CountDownLatch中初始化的数字中减为0，才会执行接下来的线程。</p>
<h3 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h3><blockquote>
<p>  CyclicBarrier的字面意思是可循环（Cyclic）使用的屏障（Barrier）。他要做的事情时让一组线程达到一个屏障（也可以叫同步点）是被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活，线程进入屏障通过<strong>Cyclibarrier</strong>的<code>await()</code>方法。</p>
</blockquote>
<p>这是一个小Demo：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">7</span>,()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"召唤神龙"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> finalI = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+</span><br><span class="line">                                   <span class="string">"\t 这是第"</span>+ finalI +<span class="string">"颗龙珠"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>CyclicBarrier与CountDownLatch的区别就是一个时顺序执行，一个时有一个屏障点，屏障点之前的线程可以不按顺序执行。</p>
<h3 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h3><blockquote>
<p>  信号量主要用于两个目的：</p>
<ul>
<li>多个资源共享的互斥使用</li>
<li>并发线程数的控制</li>
</ul>
</blockquote>
<p>SemaphoreDemo:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+</span><br><span class="line">                                       <span class="string">"\t 以抢占资源"</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+</span><br><span class="line">                                       <span class="string">"\t 三秒后释放资源"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>当一个线程使用了资源的时候，在前面调用<code>semaphore.acquire()</code>方法，前面在构造Semaphore的时候填入的permits参数就会减1，然后等资源使用完成，释放资源的时候会调用<code>semaphore.release()</code>方法，下一个线程就可以进来继续使用该资源。类似于海底捞人满了，接待员告诉你可以在外面等一下，里面人吃完了你就能进去吃饭了。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>图片来自：<a href="https://travel.qunar.com/travelbook/smartlist/7083343" target="_blank" rel="noopener">去哪儿</a></p>
]]></content>
      <tags>
        <tag>JUC</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础-0x05:Java之锁的使用</title>
    <url>/2020/05/27/Java%E5%9F%BA%E7%A1%80-0x05-Java%E4%B9%8B%E9%94%81%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><img src="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/publicImage/Java%E5%9F%BA%E7%A1%80-0x00%EF%BC%9A%E5%AD%A6%E4%B9%A0Volatile/GateOfEast.jpg" alt="ss"></p>
<h1 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h1><h2 id="Java-锁的使用"><a href="#Java-锁的使用" class="headerlink" title="Java 锁的使用"></a>Java 锁的使用</h2><blockquote>
<ul>
<li>公平锁/非公平锁</li>
<li>可重入锁（递归锁）</li>
<li>读锁/写锁</li>
</ul>
</blockquote>
<a id="more"></a>

<h3 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h3><h4 id="是什么公平锁和非公平锁"><a href="#是什么公平锁和非公平锁" class="headerlink" title="是什么公平锁和非公平锁"></a>是什么公平锁和非公平锁</h4><ul>
<li><p>公平锁</p>
<p>先来后到，像是一个队列</p>
<p>多个线程按照申请锁的<strong>顺序</strong>来获取锁。</p>
</li>
<li><p>非公平锁</p>
<p>允许加塞</p>
<p>指多个线程获取锁的顺序并<strong>不是按照申请锁的顺序</strong>，有可能后申请的线程比先申请的线程先获取锁。在高并发的情况下，有可能会造成<strong>优先级反转</strong>或者<strong>饥饿现象</strong>。</p>
</li>
</ul>
<h4 id="公平锁和非公平锁的区别"><a href="#公平锁和非公平锁的区别" class="headerlink" title="公平锁和非公平锁的区别"></a>公平锁和非公平锁的区别</h4><p>并发包中<code>ReentrantLock</code>的创建可以指定构造函数的<code>boolean</code>类型来得到公平锁或非公平锁，默认是<code>boolean</code>为<strong>false</strong>的非公平锁。</p>
<ul>
<li><p>公平锁</p>
<p>Threads acquire a fair lock in the order in which they requested it.</p>
<p>在并发环境中，每个线程在获取锁时会先查看此锁维护的等待队列，如果为空，或者当前线程时等待队列的第一个，就占有锁，否则就会加入到等待队列中，以后会按照<strong>FIFO</strong>(FirstInFirstOut)的规则从队列中取到自己。</p>
</li>
<li><p>非公平锁</p>
<p>A nonfair lock premits barging: threads requesting a lock can jump ahead of the queue of waiting threads if the lock happens to be available it is requested.</p>
<p>请求锁时尝试占用锁，如果占用失败，再尝试公平锁的方式。</p>
</li>
</ul>
<p>对于<code>ReentrantLock</code>而言，非公平锁比公平锁<strong>吞吐量</strong>大。</p>
<p><code>Synchronized</code> 也是一种非公平锁。</p>
<h3 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h3><h4 id="什么是可重入锁"><a href="#什么是可重入锁" class="headerlink" title="什么是可重入锁"></a>什么是可重入锁</h4><p>可重入锁（又名<strong>递归锁</strong>）</p>
<p>指的是同一线程外层函数获得锁之后，内侧递归函数仍然能获得该锁的代码。在同一个线程在外侧方法获取锁的时候，再进入内层方法会自动获取锁。</p>
<p>也就是说，线程可以进入任何一个他已经拥有的锁所同步着的代码块。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> sync <span class="keyword">void</span> <span class="title">method0x00</span><span class="params">()</span></span>&#123;</span><br><span class="line">    methor0x01();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> sync <span class="keyword">void</span> <span class="title">method0x01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在一个同步方法中<strong>访问另一个</strong>同步方法，两个方法用的是<strong>同一把锁</strong>。</p>
<p><code>ReentrantLock</code>/<code>Synchronized</code>就是一个经典的可重入锁</p>
<h4 id="可重入锁的最大作用"><a href="#可重入锁的最大作用" class="headerlink" title="可重入锁的最大作用"></a>可重入锁的最大作用</h4><p><u><strong>避免死锁</strong></u></p>
<h4 id="case-1"><a href="#case-1" class="headerlink" title="case 1:"></a>case 1:</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> allwayz</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                phone.sendSMS();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"t1"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                phone.sendSMS();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"t2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSMS</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"\t Invoked sendSMS"</span>);</span><br><span class="line">        sendEmail();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"\t Invoked sendEmail"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * t1	 Invoked sendSMS	t1线程在外层方法获取锁</span></span><br><span class="line"><span class="comment"> * t1	 Invoked sendEmail	t1在进入内层方法会自动获取锁</span></span><br><span class="line"><span class="comment"> * t2	 Invoked sendSMS</span></span><br><span class="line"><span class="comment"> * t2	 Invoked sendEmail</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></div>

<h4 id="case2"><a href="#case2" class="headerlink" title="case2:"></a>case2:</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> allwayz</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ResourceModel resourceModel = <span class="keyword">new</span> ResourceModel();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(resourceModel);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(resourceModel);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 对资源类实现Runnable接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResourceModel</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"\t Invoked get()"</span>);</span><br><span class="line">            set();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"\t Invoked set()"</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行结果</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Thread-0	 Invoked get()</span></span><br><span class="line"><span class="comment"> * Thread-0	 Invoked set()</span></span><br><span class="line"><span class="comment"> * Thread-1	 Invoked get()</span></span><br><span class="line"><span class="comment"> * Thread-1	 Invoked set()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></div>

<h3 id="自旋锁-spinlock"><a href="#自旋锁-spinlock" class="headerlink" title="自旋锁(spinlock)"></a>自旋锁(spinlock)</h3><p>是指尝试获取锁的线程不会立即阻塞，而是<strong>采用循环的方式去尝试获取锁</strong>，这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗cpu</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//unsafe.getAndAddInt()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> var5;</span><br><span class="line">       <span class="keyword">do</span> &#123;</span><br><span class="line">           var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">       &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line">       <span class="keyword">return</span> var5;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="SpinLockDemo"><a href="#SpinLockDemo" class="headerlink" title="SpinLockDemo"></a>SpinLockDemo</h4><p>手写自旋锁</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 题目： 手写一个自旋锁&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 自旋锁的好处： 循环比较获取，直到成功为止，没有类似wait的阻塞。</span></span><br><span class="line"><span class="comment"> * muLock()方法： 在while loop中调用compareAndSet()，</span></span><br><span class="line"><span class="comment"> * 如果期望值线程是null，就说明我是第一个进入的线程。</span></span><br><span class="line"><span class="comment"> * myUnLock()方法： 继续调用compareAndSet()，如果期望值thread，</span></span><br><span class="line"><span class="comment"> *  实际也是thread，就把原子引用线程设置为空，等待下一次上锁。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> allwayz</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpinLockDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 原子引用线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AtomicReference&lt;Thread&gt; atomicReference = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpinLockDemo spinLockDemo = <span class="keyword">new</span> SpinLockDemo();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            spinLockDemo.myLock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            spinLockDemo.myUnLock();</span><br><span class="line">        &#125;,<span class="string">"0x00"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            spinLockDemo.myLock();</span><br><span class="line">            spinLockDemo.myUnLock();</span><br><span class="line">        &#125;,<span class="string">"0x01"</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Thread thread =  Thread.currentThread();</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"\t coming in"</span>);</span><br><span class="line">        <span class="keyword">while</span> (!atomicReference.compareAndSet(<span class="keyword">null</span>,thread))&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myUnLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Thread thread = Thread.currentThread();</span><br><span class="line">        atomicReference.compareAndSet(thread,<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"\t Invoked myUnLock"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="独占锁（写锁）-共享锁（读锁）-互斥锁"><a href="#独占锁（写锁）-共享锁（读锁）-互斥锁" class="headerlink" title="独占锁（写锁）/共享锁（读锁）/互斥锁"></a>独占锁（写锁）/共享锁（读锁）/互斥锁</h3><ul>
<li><p>独占锁</p>
<p>指该锁一次只能被一个线程持有。对<code>ReentranLock</code>和<code>Synchronized</code>而言都是独占锁</p>
</li>
<li><p>共享锁</p>
<p>指该锁可悲多个线程持有</p>
<p>对<code>ReentrantReadWriteLock</code>其读锁是共享锁，写锁是独占锁</p>
<p>读锁的共享锁可保证并发读，是非常高效的。</p>
<p><strong>读写</strong>，<strong>写读</strong>，<strong>写写</strong>的过程是互斥的。</p>
</li>
</ul>
<p>接下来手写一个读写锁</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 题目：手写读写锁&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;li&gt;多个线程读去同一个资源类&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;li&gt;只能有一个线程对资源类进行写操作&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;hr&gt;</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;li&gt;写操作：原子➕独占&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *	   &lt;li&gt;读操作：并行&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> allwayz</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadWriteLockDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MessageInfo messageInfo = <span class="keyword">new</span> MessageInfo();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> finalI = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                messageInfo.write(String.valueOf(finalI), finalI);</span><br><span class="line">                messageInfo.read(String.valueOf(finalI));</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageInfo</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> ReentrantReadWriteLock reentrantReadWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String key, Object value)</span></span>&#123;</span><br><span class="line">        reentrantReadWriteLock.writeLock().lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()</span><br><span class="line">                               + <span class="string">"\t Writing: "</span>+ key);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">300</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(key,value);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()</span><br><span class="line">                               + <span class="string">"\t   writing complete"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            reentrantReadWriteLock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        reentrantReadWriteLock.readLock().lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()</span><br><span class="line">                               + <span class="string">"\t Loading... "</span> + key);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">300</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            Object result = map.get(key);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()</span><br><span class="line">                               + <span class="string">"\t Reading:"</span> + result);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            reentrantReadWriteLock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>&#123;</span><br><span class="line">        map.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>执行结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1	 Writing: 1</span></span><br><span class="line"><span class="comment"> * 1	   writing complete</span></span><br><span class="line"><span class="comment"> * 2	 Writing: 2</span></span><br><span class="line"><span class="comment"> * 2	   writing complete</span></span><br><span class="line"><span class="comment"> * 3	 Writing: 3</span></span><br><span class="line"><span class="comment"> * 3	   writing complete</span></span><br><span class="line"><span class="comment"> * 4	 Writing: 4</span></span><br><span class="line"><span class="comment"> * 4	   writing complete</span></span><br><span class="line"><span class="comment"> * 5	 Writing: 5</span></span><br><span class="line"><span class="comment"> * 5	   writing complete</span></span><br><span class="line"><span class="comment"> * 5	 Loading... 5</span></span><br><span class="line"><span class="comment"> * 1	 Loading... 1</span></span><br><span class="line"><span class="comment"> * 2	 Loading... 2</span></span><br><span class="line"><span class="comment"> * 4	 Loading... 4</span></span><br><span class="line"><span class="comment"> * 3	 Loading... 3</span></span><br><span class="line"><span class="comment"> * 3	 Reading:3</span></span><br><span class="line"><span class="comment"> * 5	 Reading:5</span></span><br><span class="line"><span class="comment"> * 2	 Reading:2</span></span><br><span class="line"><span class="comment"> * 1	 Reading:1</span></span><br><span class="line"><span class="comment"> * 4	 Reading:4</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></div>

<p>写入的时候不会被打断，读取的时候可以一起读取</p>
]]></content>
      <tags>
        <tag>JUC</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础-0x04:集合类线程不安全</title>
    <url>/2020/05/26/Java%E5%9F%BA%E7%A1%80-0x04-%E9%9B%86%E5%90%88%E7%B1%BB%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<p><img src="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/publicImage/Java%E5%9F%BA%E7%A1%80-0x00%EF%BC%9A%E5%AD%A6%E4%B9%A0Volatile/water_summer.jpg" alt="ss"></p>
<h1 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h1><h2 id="集合类线程不安全"><a href="#集合类线程不安全" class="headerlink" title="集合类线程不安全"></a>集合类线程不安全</h2><blockquote>
<p>  在多线程并发环境下，对集合类执行像<code>add( )</code>,<code>put( )</code>这样的操作<br>  会触发<strong>java.util.ConcurrentModificationException</strong>这样的异常</p>
<p>  上一篇已经举例了<strong>ArrayList</strong>的解决方法，这次看看其他集合类的底层到底是怎么解决的。</p>
</blockquote>
<a id="more"></a>

<h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetNotSafeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; stringSet = Collections.synchronizedSet(<span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                stringSet.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>));</span><br><span class="line">                System.out.println(stringSet);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>使用<code>synchronizedSet</code>来<strong>new</strong>一个<strong>HashSet</strong>，就可以解决报错的问题。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetNotSafeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; stringSet = Collections.synchronizedSet(<span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                stringSet.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>));</span><br><span class="line">                System.out.println(stringSet);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>还可以使用<code>CopyOnWriteArraySet&lt;E&gt;</code>这个类来初始化，也能解决这个问题</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetNotSafeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; stringSet = <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                stringSet.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>));</span><br><span class="line">                System.out.println(stringSet);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>可以看一下<strong>CopyOnWriteArraySet</strong>的源码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyOnWriteArraySet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ······</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CopyOnWriteArrayList&lt;E&gt; al;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates an empty set.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CopyOnWriteArraySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        al = <span class="keyword">new</span> CopyOnWriteArrayList&lt;E&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以发现<strong>CopyOnWriteArraySet</strong>在初始化的时候，还是<strong>new</strong>了一个<code>CopyOnWriteArrayList&lt;E&gt;</code></p>
</li>
</ul>
</li>
</ul>
<h3 id="HashSet底层数据结构"><a href="#HashSet底层数据结构" class="headerlink" title="HashSet底层数据结构"></a>HashSet底层数据结构</h3><blockquote>
<p>  就是HashMap！</p>
</blockquote>
<p>下面是HashSet的构造函数。</p>
<p>注释上说了：<strong><u>构造一个新的、空的集合，后面的HashMap的实例有默认为16的容量和0.75的负载因子。</u></strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has</span></span><br><span class="line"><span class="comment"> * default initial capacity (16) and load factor (0.75).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>但是对比<strong>HashSet</strong>和<strong>HashMap</strong>的添加方法会发现传的值是不一样的。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">set.add(<span class="string">"a"</span>);</span><br><span class="line">map.put(<span class="string">"a"</span>,<span class="string">"a"</span>);</span><br></pre></td></tr></table></figure></div>

<p>既然底层都是HashMap，那为什么<strong>HashSet</strong>添加一个参数，<strong>HashMap</strong>要添加两个参数呢？</p>
<p>还是结合源码来学习</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line">    </span><br><span class="line">    ······</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Adds the specified element to this set if it is not already present.</span></span><br><span class="line"><span class="comment">     * More formally, adds the specified element &lt;tt&gt;e&lt;/tt&gt; to this set if</span></span><br><span class="line"><span class="comment">     * this set contains no element &lt;tt&gt;e2&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;(e==null&amp;nbsp;?&amp;nbsp;e2==null&amp;nbsp;:&amp;nbsp;e.equals(e2))&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     * If this set already contains the element, the call leaves the set</span></span><br><span class="line"><span class="comment">     * unchanged and returns &lt;tt&gt;false&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e element to be added to this set</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this set did not already contain the specified</span></span><br><span class="line"><span class="comment">     * element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ······</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>HashSet</code>的<strong>add</strong>方法，其实调用的是<strong>Map</strong>的<code>put</code>方法，也是两个参数。只不过<code>HashSet</code><strong>add</strong>的就是<strong>HashMap</strong>中的<code>Key</code>，然后<code>Value</code>是一个叫<strong><em>PRESENT</em></strong>的常量</p>
<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetNotSafeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                map.put(Thread.currentThread().getName(),</span><br><span class="line">                        UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>));</span><br><span class="line">                System.out.println(map);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>跟其他的集合类一样，也会爆出<strong>ConcurrentModificationException</strong>。</p>
<p>解决方法：</p>
<ul>
<li><p>使用<code>Collections.synchronizedMap(new HashMap());</code></p>
</li>
<li><p>不要去<strong>JUC</strong>包下面找<code>CopyOnWriteHashMap</code>。</p>
<p><strong>Java</strong>提供的解决方法是一个叫<code>ConcurrentHashMap&lt;K,V&gt;</code></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>JUC</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础-0x03:ArrayList线程不安全的问题</title>
    <url>/2020/05/25/Java%E5%9F%BA%E7%A1%80-0x03-ArrayList%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><img src="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/publicImage/Java%E5%9F%BA%E7%A1%80-0x00%EF%BC%9A%E5%AD%A6%E4%B9%A0Volatile/morocco.jpeg" alt="Morocco"></p>
<h1 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h1><h2 id="我们知道ArrayList是线程不安全的"><a href="#我们知道ArrayList是线程不安全的" class="headerlink" title="我们知道ArrayList是线程不安全的"></a>我们知道ArrayList是线程不安全的</h2><blockquote>
<p>  众所周知，ArrayList时线程不安全的，那么有没有什么方法，既保证了<br>  AllrayList的高并发，又保证了线程安全呢？</p>
<p>  我编写了一个案例，并给出了解决方案。</p>
</blockquote>
<a id="more"></a>

<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 故障现象&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;b&gt;java.util.ConcurrentModificationException&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2. 导致原因&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 	   、</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3. 解决方案&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;i&gt;3.1 new Vector&lt;&gt;;&lt;/i&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;i&gt;3.2 Collections.synchronizedList(new ArrayList)&lt;&gt;();&lt;/i&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *     </span></span><br><span class="line"><span class="comment"> * 4. 优化建议&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> allwayz</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerNotSafeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                stringList.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>));</span><br><span class="line">                System.out.println(stringList);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>当多线程执行<code>ArrayList.add()</code>方法时，会报错</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="VERILOG"><figure class="iseeu highlight /verilog"><table><tr><td class="code"><pre><span class="line">java<span class="variable">.util</span><span class="variable">.ConcurrentModificationException</span></span><br><span class="line">	at java<span class="variable">.util</span><span class="variable">.ArrayList</span>$Itr<span class="variable">.checkForComodification</span>(ArrayList<span class="variable">.java</span>:<span class="number">909</span>)</span><br><span class="line">	at java<span class="variable">.util</span><span class="variable">.ArrayList</span>$Itr<span class="variable">.next</span>(ArrayList<span class="variable">.java</span>:<span class="number">859</span>)</span><br><span class="line">	at java<span class="variable">.util</span><span class="variable">.AbstractCollection</span><span class="variable">.toString</span>(AbstractCollection<span class="variable">.java</span>:<span class="number">461</span>)</span><br><span class="line">	at java<span class="variable">.lang</span><span class="variable">.String</span><span class="variable">.valueOf</span>(String<span class="variable">.java</span>:<span class="number">2994</span>)</span><br><span class="line">	at java<span class="variable">.io</span><span class="variable">.PrintStream</span><span class="variable">.println</span>(PrintStream<span class="variable">.java</span>:<span class="number">821</span>)</span><br><span class="line">	at com<span class="variable">.allwayz</span><span class="variable">.thread</span><span class="variable">.ContainerNotSafeDemo</span><span class="variable">.lambda</span>$main$<span class="number">0</span>(ContainerNotSafeDemo<span class="variable">.java</span>:<span class="number">16</span>)</span><br><span class="line">	at java<span class="variable">.lang</span><span class="variable">.Thread</span><span class="variable">.run</span>(Thread<span class="variable">.java</span>:<span class="number">748</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="解决方案-一、"><a href="#解决方案-一、" class="headerlink" title="解决方案 一、"></a>解决方案 一、</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br></pre></td></tr></table></figure></div>



<h3 id="解决方案-二、"><a href="#解决方案-二、" class="headerlink" title="解决方案 二、"></a>解决方案 二、</h3><p><strong>限制不可以使用Vector和Collections工具类</strong></p>
<p>JUC包中有个类叫<code>CopyOnWriteArrayList&lt;E&gt;</code></p>
<p>为什么CopyOnWriteArrayList可以保证线程安全呢？ 来看看源码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyOnWriteArrayList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ······</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** The lock protecting all mutators */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">transient</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * The array, accessed only via getArray/setArray. </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Object[] array;</span><br><span class="line">    </span><br><span class="line">    ······</span><br><span class="line">        </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Appends the specified element to the end of this list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * CopyOnWrite容器即写时复制的容器。往一个容器中添加元素时，不直接往房钱容器object[ ]对象添加，</span></span><br><span class="line"><span class="comment">     * 而是先将当前容器object[ ]进行Copy，复制出一个新的容器Object[ ] newElements，然后向新的容</span></span><br><span class="line"><span class="comment">     * 器中添加元素，添加完元素之后，再将原容器的引用指向新的容器 setArray(newElements);。这样做的好处是可以</span></span><br><span class="line"><span class="comment">     * 对CopyOnWrite容器进行并发的读，而不需要加锁，因为当情容器不会添加任何元素。</span></span><br><span class="line"><span class="comment">     * 所以CopyOnWrite容器也是一种读写分离的思想。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e element to be appended to this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object[] elements = getArray();</span><br><span class="line">            <span class="keyword">int</span> len = elements.length;</span><br><span class="line">            Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">            newElements[len] = e;</span><br><span class="line">            setArray(newElements);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ······</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>CopyOnWrite</strong>容器即写时复制的容器。往一个容器中添加元素时，不直接往房钱容器<code>object[ ]</code>对象添加，而是先将当前容器<code>object[ ]</code>进行<strong>Copy</strong>，复制出一个新的容器<code>Object[ ] newElements</code>，然后向新的容器中添加元素，添加完元素之后，再将原容器的引用指向新的容器 <code>setArray(newElements);</code>。这样做的好处是可以对<strong>CopyOnWrite</strong>容器进行并发的读，而不需要加锁，因为当情容器不会添加任何元素。所以<strong>CopyOnWrite</strong>容器也是一种读写分离的思想。</p>
]]></content>
      <tags>
        <tag>JUC</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础-0x02:探究CAS引出的ABA问题</title>
    <url>/2020/05/25/Java%E5%9F%BA%E7%A1%80-0x02-%E6%8E%A2%E7%A9%B6CAS%E5%BC%95%E5%87%BA%E7%9A%84ABA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><img src="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/publicImage/Java%E5%9F%BA%E7%A1%80-0x00%EF%BC%9A%E5%AD%A6%E4%B9%A0Volatile/v2-eff82b3e2b847cac06b9e7fb4db0ecc5_1200x500.jpg" alt="Fuji"></p>
<h1 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h1><h2 id="由CAS缺陷到ABA问题"><a href="#由CAS缺陷到ABA问题" class="headerlink" title="由CAS缺陷到ABA问题"></a>由CAS缺陷到ABA问题</h2><blockquote>
<p>  <span id = "ABA">谈谈什么是ABA问题：<strong>狸猫换太子</strong> </span></p>
<p>  Thread<code>0x00</code>, Thread0x01。 <code>0x01</code>比0x00 用时少，同时操作主内存。由于<code>0x01</code>比0x00快，所以主内存中数据已经被改了。<code>0x01</code>再次读取内存中的值，再次修改主内存中的值。几次循环之后，<code>0x00</code>执行完毕，写回主内存时，主内存的值正好是期望值，然后0x00修改成功。</p>
<p>  表面上是风平浪静的，但是在0x00执行过程中，0x01已经修改过多次。 这就叫ABA问题</p>
</blockquote>
<a id="more"></a>

<h3 id="ABA问题是怎么产生的"><a href="#ABA问题是怎么产生的" class="headerlink" title="ABA问题是怎么产生的"></a>ABA问题是怎么产生的</h3><p>CAS会导致”<strong>ABA问题</strong>“。</p>
<p>CAS算法实现一个重要前提需要取出内存中某时刻的数据，并在当下时刻比较并替换，那么在这个时间差类会导致数据的变化。</p>
<p>具体发生过程在上面<a href="#ABA">引言</a>部分已经写过，不再赘述。</p>
<p><strong><u>尽管线程 <code>0x00</code> 的操作成功，但是不代表这个过程是没有问题的。</u></strong></p>
<h3 id="原子引用"><a href="#原子引用" class="headerlink" title="原子引用"></a>原子引用</h3><p><code>java.util.concurrent.atomic.AtomicReference&lt;V&gt;</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JUC的包中给我们提供了AtomicInteger、AtomicLong、AtomicBoolean等&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *     被原子包装的数据结构。&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如果我们希望是一个AtomicUser,AtomicOrder,AtomicCustomer这养的类也是没有问题的&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * JUC中为我们提供了AtomicReference&lt;V&gt;这个类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> allwayz</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicReferenceDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AtomicReference&lt;User&gt; userAtomicReference = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line">        User z3 = <span class="keyword">new</span> User(<span class="string">"z3"</span>,<span class="number">22</span>);</span><br><span class="line">        User l4 = <span class="keyword">new</span> User(<span class="string">"l4"</span>,<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">        userAtomicReference.set(z3);</span><br><span class="line">        System.out.println(</span><br><span class="line">            userAtomicReference.compareAndSet(z3,l4)+</span><br><span class="line">            <span class="string">"\t current "</span>+userAtomicReference);</span><br><span class="line"></span><br><span class="line">        System.out.println(</span><br><span class="line">            userAtomicReference.compareAndSet(z3,l4)+</span><br><span class="line">            <span class="string">"\t current "</span>+userAtomicReference);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<p>如何解决ABA问题？</p>
<ul>
<li>原子引用</li>
<li>增加一种机制：修改版本号（类似时间戳）</li>
</ul>
<h3 id="时间戳原子引用"><a href="#时间戳原子引用" class="headerlink" title="时间戳原子引用"></a>时间戳原子引用</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ABA问题的解决&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * AtomicStampedReference</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> allwayz</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ABADemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> AtomicReference&lt;Integer&gt; atomicReference = <span class="keyword">new</span> AtomicReference&lt;&gt;(<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">static</span> AtomicStampedReference&lt;Integer&gt; atomicStampedReference = <span class="keyword">new</span> AtomicStampedReference&lt;&gt;(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="comment">//模拟ABA</span></span><br><span class="line">            atomicReference.compareAndSet(<span class="number">100</span>,<span class="number">101</span>);</span><br><span class="line">            System.out.println(<span class="string">"current number: "</span> + atomicReference.get());</span><br><span class="line">            atomicReference.compareAndSet(<span class="number">101</span>,<span class="number">100</span>);</span><br><span class="line">            System.out.println(<span class="string">"current number: "</span> + atomicReference.get());</span><br><span class="line">            System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>);</span><br><span class="line">        &#125;,<span class="string">"t1"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//暂停t2线程1秒，保证t1线程先执行</span></span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(atomicReference.compareAndSet(<span class="number">100</span>,<span class="number">101</span>)+</span><br><span class="line">                    <span class="string">"\t Result: "</span> + atomicReference.get());</span><br><span class="line">        &#125;,<span class="string">"t2"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">2</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;以下是ABA问题的解决&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * T3线程拿到一开始的版本号，然后暂停1秒中，等T4线程拿到一样的版本号，</span></span><br><span class="line"><span class="comment">         * 然后暂停3秒钟，确保T3线程执行一次ABA操作。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">int</span> stamp = atomicStampedReference.getStamp();</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"\t 第一次版本号："</span>+stamp);</span><br><span class="line">            <span class="keyword">try</span> &#123; </span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>); </span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace(); </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行ABA操作</span></span><br><span class="line">            atomicStampedReference.compareAndSet(<span class="number">100</span>,<span class="number">101</span>,</span><br><span class="line">                    atomicStampedReference.getStamp(),</span><br><span class="line">                    atomicStampedReference.getStamp()+<span class="number">1</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+</span><br><span class="line">                               <span class="string">"\t 第二次版本号："</span>+atomicStampedReference.getStamp());</span><br><span class="line"></span><br><span class="line">            atomicStampedReference.compareAndSet(<span class="number">101</span>,<span class="number">100</span>,</span><br><span class="line">                    atomicStampedReference.getStamp(),</span><br><span class="line">                    atomicStampedReference.getStamp()+<span class="number">1</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+</span><br><span class="line">                               <span class="string">"\t 第三次版本号："</span>+atomicStampedReference.getStamp());</span><br><span class="line">            System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>);</span><br><span class="line">        &#125;,<span class="string">"t3"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">int</span> stamp = atomicStampedReference.getStamp();</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"\t 第一次版本号："</span>+stamp);</span><br><span class="line">            <span class="keyword">try</span> &#123; </span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>); </span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace(); </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> result = atomicStampedReference.compareAndSet(<span class="number">100</span>,<span class="number">2019</span>,stamp,stamp+<span class="number">1</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+</span><br><span class="line">                    <span class="string">"\t 修改结果： "</span>+result+</span><br><span class="line">                    <span class="string">"\n 实际版本号："</span>+atomicStampedReference.getStamp()+</span><br><span class="line">                    <span class="string">"\n 实际最新值："</span>+atomicStampedReference.getReference());</span><br><span class="line">        &#125;,<span class="string">"t4"</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>引入了原子时间戳之后，线程执行中共享变量被修改的问题就不会逃过检测，也就保证了线程安全。</p>
]]></content>
      <tags>
        <tag>JUC</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础-0x01:学习CAS</title>
    <url>/2020/05/24/Java%E5%9F%BA%E7%A1%80-0x01-%E5%AD%A6%E4%B9%A0CAS/</url>
    <content><![CDATA[<h1 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h1><h2 id="CAS你知道吗"><a href="#CAS你知道吗" class="headerlink" title="CAS你知道吗"></a>CAS你知道吗</h2><blockquote>
<p>  <strong>CAS</strong>（<strong>Compare and swap</strong>），即比较并交换，也是实现我们平时所说的自旋锁或乐观锁的核心操作</p>
<p>  它的实现很简单，就是用一个预期的值和内存值进行比较，如果两个值相等，就用预期的值替换内存值，并返回 <code>true</code>。否则，返回 <code>false</code>。</p>
</blockquote>
<a id="more"></a>

<h3 id="比较并交换"><a href="#比较并交换" class="headerlink" title="比较并交换"></a>比较并交换</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. CAS是什么? ==&gt; CompareAndSwap&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *     比较并交换</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> allwayz</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CASDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//真实值和期望值相同，修改成功</span></span><br><span class="line">        System.out.println(</span><br><span class="line">            atomicInteger.compareAndSet(<span class="number">5</span>,<span class="number">2020</span>)+</span><br><span class="line">            <span class="string">"\t current atomicInteger： "</span>+atomicInteger.toString());</span><br><span class="line">        <span class="comment">//第二次真实值已经被修改，则与期望不符，修改失败</span></span><br><span class="line">        System.out.println(</span><br><span class="line">            atomicInteger.compareAndSet(<span class="number">5</span>,<span class="number">2020</span>)+</span><br><span class="line">            <span class="string">"\t current atomicInteger： "</span>+atomicInteger.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="CAS底层原理是什么-谈谈对Unsafe的理解"><a href="#CAS底层原理是什么-谈谈对Unsafe的理解" class="headerlink" title="CAS底层原理是什么  谈谈对Unsafe的理解"></a>CAS底层原理是什么  谈谈对Unsafe的理解</h3><p>底层原理：</p>
<ul>
<li>自旋锁</li>
<li>UnSafe类</li>
</ul>
<h4 id="atomicInteger-getAndIncrement"><a href="#atomicInteger-getAndIncrement" class="headerlink" title="atomicInteger.getAndIncrement();"></a>atomicInteger.getAndIncrement();</h4><p>源码：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Atomically increments by one the current value.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the previous value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    this:		当前对象</span></span><br><span class="line"><span class="comment">    valueOffset:内存偏移量，内存地址</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Object：	当前对象</span></span><br><span class="line"><span class="comment"> * long：	内存地址</span></span><br><span class="line"><span class="comment"> * int：	固定是1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@Link</span> sun.misc.UnSafe.getAndAddInt()&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="UnSafe"><a href="#UnSafe" class="headerlink" title="UnSafe"></a>UnSafe</h4><p>是<strong>CAS</strong>的核心类，由于<strong>Java</strong>方法无法直接访问底层系统。需要通过本地（<code>native</code>）方法来访问，UnSafe相当于一个后门，基于该类可以直接操作特定内存的数据。Unsafe类存在于 <code>sun.misc</code>包中，其内部方法操作可以像C的指针一样直接操作内存，因为Java中CAS操作的执行依赖于Unsafe类的方法。</p>
<p>注意⚠️：<strong><u>Unsafe类中的所有方法都是native修饰的，也就是说Unsafe类中所有的方法都直接调用操作系统底层资源执行相应任务</u></strong>。</p>
<h4 id="CAS是什么"><a href="#CAS是什么" class="headerlink" title="CAS是什么"></a>CAS是什么</h4><p>全称为Compare-And-Swap，<strong>是一条CPU并发原语。</strong></p>
<p>它的功能是判断内存某个未知的值是否为预期值，如果是，则更改为新的值，这个过程是原子的。</p>
<p><strong>CAS</strong>并发原语体现在Java语言中就是<code>sun.misc.Unsafe</code>类中的各个方法。强调Unsafe类中的CAS方法，<strong>JVM</strong>会帮我们实现出CAS汇编指令。这是一种完全依赖于硬件的功能，通过它实现了原子操作。再次强调，由于<strong>CAS</strong>是一种系统原语，原语属于操作系统用语范畴，是由若干条指令组成的，用于完成某个功能的一个过程，<strong>并且原语的执行<u>必须是连续的</u>，在执行过程中不允许被中断，也就是说CAS是一条CPU的原子指令，不会造成所谓的数据不一致问题</strong>。</p>
<blockquote>
<p>  假设线程A和线程B两个线程同时执行getAndAddInt操作；</p>
</blockquote>
<ol>
<li><strong>AtomicInteger</strong>的里面的<strong>value</strong>原始值为3，即主内存中<strong>AtomicInteger</strong>的value为3，根据JMM模型，线程A和线程B各自持有一份value = 3的副本分别到各自的工作内存。</li>
<li>线程A通过<strong>getIntVolatile</strong>(var1, var2)拿到value值3，这是线程A被挂起。</li>
<li>线程B也通过<strong>getIntVolatile</strong>(var1, var2)拿到value值3，此时刚好线程B<strong>没有被挂起</strong>，并执行<strong>compareAndSwapInt</strong>方法，比较内存值也为3，成功修改内存值为4，线程B结束。</li>
<li>这时线程A恢复，执行从没怕热A你的SWAPInt方法，发现工作内存中的值 3 与主内存中的值 4 不一致，说明其他线程已经抢先一步修改过了，那么线程A本次修改失败，只能重新再读取一遍。</li>
<li>线程A重新获取主内存中Value，因为变量value被<strong>Volatile</strong>修饰，所以其他线程对他的修改线程A总能看到，线程A继续执行<strong>compareAndSwapInt</strong>进行比较替换，直到成功。</li>
</ol>
<h5 id="底层汇编"><a href="#底层汇编" class="headerlink" title="底层汇编"></a>底层汇编</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line">UNSAFE_ENTRY(jboolean,Unsafe_CompareAndSwapInt(JNIEnv *env,jobject unsafe,jobject obj,jlong offset,jint e,jint x))</span><br><span class="line">    UnsafeWrapper(<span class="string">"Unsafe_CompareAndSwapInt"</span>);</span><br><span class="line">	oop p = JNIHandles::resolve(obj);</span><br><span class="line">	jint*addr = (jinr*)index_oop_from_field_offset_long(p,offset);</span><br><span class="line">	<span class="keyword">return</span> (jint)(Atomic::cmpxchg(x,addr,e)) == e;</span><br><span class="line">UNSAFE_END</span><br><span class="line">	<span class="comment">//先想办法拿到变量Value在内存中的地址</span></span><br><span class="line">    <span class="comment">//通过Atomic::cmpxchg实现比较并替换，其中参数x是即将更新的值，参数e是内存的值</span></span><br></pre></td></tr></table></figure></div>



<h3 id="CAS缺点"><a href="#CAS缺点" class="headerlink" title="CAS缺点"></a>CAS缺点</h3><ul>
<li><h4 id="循环时间长-开销很大"><a href="#循环时间长-开销很大" class="headerlink" title="循环时间长 开销很大"></a>循环时间长 开销很大</h4></li>
</ul>
<p>在源码中，我们可以看到getAndAddInt方法，有个do while loop。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>如果CAS失败，会一直尝试。如果CAS长时间不成功，可能会给CPU带来很大的开销。</p>
<ul>
<li><h4 id="只能保证一个共享变量的原子操作"><a href="#只能保证一个共享变量的原子操作" class="headerlink" title="只能保证一个共享变量的原子操作"></a>只能保证一个共享变量的原子操作</h4></li>
</ul>
<p>当对一个共享变量进行操作时，我们可以使用CAS的方式来保证原子操作</p>
<p>但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用<strong>锁</strong>来保证原子性。</p>
<ul>
<li><h4 id="引出来ABA问题"><a href="#引出来ABA问题" class="headerlink" title="引出来ABA问题"></a>引出来ABA问题</h4></li>
</ul>
]]></content>
      <tags>
        <tag>JUC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud:完整脑图</title>
    <url>/2020/05/23/Spring-Cloud-%E5%AE%8C%E6%95%B4%E8%84%91%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="课程内容来自-尚硅谷-周阳"><a href="#课程内容来自-尚硅谷-周阳" class="headerlink" title="课程内容来自 尚硅谷 周阳"></a>课程内容来自 尚硅谷 周阳</h2><h2 id="笔记整理-By-Allwayz"><a href="#笔记整理-By-Allwayz" class="headerlink" title="笔记整理 By Allwayz"></a>笔记整理 By Allwayz</h2><h2 id="资源下载："><a href="#资源下载：" class="headerlink" title="资源下载："></a>资源下载：</h2><ul>
<li>脑图<ul>
<li><a href="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/SpringCloud/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.pdf" target="_blank" rel="noopener">PDF格式</a></li>
<li><a href="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/SpringCloud/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.png" target="_blank" rel="noopener">PNG格式</a></li>
<li><a href="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/SpringCloud/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.xmind" target="_blank" rel="noopener">Xmind格式</a></li>
</ul>
</li>
<li>源码<ul>
<li><a href="https://gitee.com/allwayz/cloud2020" target="_blank" rel="noopener">自学过程源码</a></li>
<li><a href="https://github.com/zzyybs/atguigu_spirngcloud2020" target="_blank" rel="noopener">周阳老师发布源码</a></li>
</ul>
</li>
<li>课程视频<ul>
<li><a href="https://www.bilibili.com/video/BV1yE411x7Ky?p=1" target="_blank" rel="noopener">哔哩哔哩地址</a></li>
</ul>
</li>
</ul>
<a id="more"></a>

<p><a href="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/SpringCloud/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.png" target="_blank" rel="noopener"><img src="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/SpringCloud/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.png" alt="脑图"></a></p>
]]></content>
      <tags>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础-0x00：学习Volatile</title>
    <url>/2020/05/23/Java%E5%9F%BA%E7%A1%80-0x00-%E5%AD%A6%E4%B9%A0Volatile/</url>
    <content><![CDATA[<h1 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h1><h2 id="1-谈谈对volatile的理解"><a href="#1-谈谈对volatile的理解" class="headerlink" title="1. 谈谈对volatile的理解"></a>1. 谈谈对<code>volatile</code>的理解</h2><h3 id="volatile是Java虚拟机提供的轻量级的同步机制。"><a href="#volatile是Java虚拟机提供的轻量级的同步机制。" class="headerlink" title="volatile是Java虚拟机提供的轻量级的同步机制。"></a><strong>volatile</strong>是<strong>Java</strong>虚拟机提供的轻量级的同步机制。</h3><p>三大特性：</p>
<ol>
<li><p>保证可见性</p>
<p>一个线程修改了主内存中的值，其他线程回马上收到通知，进行同步</p>
</li>
<li><p>不保证原子性</p>
</li>
<li><p>禁止指令重排</p>
</li>
</ol>
<a id="more"></a>

<h3 id="JMM（Java内存模型）"><a href="#JMM（Java内存模型）" class="headerlink" title="JMM（Java内存模型）"></a><strong>JMM</strong>（Java内存模型）</h3><p>本身是一种抽象的概念，并不真实存在，它描述的是一组<strong>规则</strong>或者<strong>规范</strong>，通过这组规范定义了程序中各个变量（包括实例字段，静态字典和构成数组对象的元素）的访问方式。</p>
<p><strong>JMM</strong>关于同步的规定：</p>
<ol>
<li>线程解锁前，必须把共享变量的值刷新回主内存</li>
<li>线程加锁前，必须读取主内存的最新值到自己的工作内存</li>
<li>加锁解锁是同一把锁</li>
</ol>
<p>由于<strong>JVM</strong>运行程序的实体是线程，而每个线程创建时，<strong>JVM</strong>都会为其创建一个工作内存（有些地方称为栈空间），工作内存时每个线程的私有数据区域，而<strong>JAVA</strong>内存模型中规定所有变量都存储在<strong>主内存</strong>，主内存时共享内存区域，所有线程都可以访问，<strong>但线程对变量的操作（读取赋值等）必须在工作内存中进行，首先要将变量从主内存拷贝到自己的工作内存空间，然后对变量进行操作，操作完成后再将变量写回主内存，</strong>不能直接操作主内存中的变量，哥哥线程中的工作内存中存储着主内存中的<em>变量拷贝副本</em>，因此不同的线程间无法访问对方的工作内存，线程间的通信（传值）必须通过主内存来完成，简要访问过程如下图：</p>
<p>![屏幕快照 2020-05-23 16.41.11](/Users/allwayz/Desktop/屏幕快照 2020-05-23 16.41.11.png)</p>
<p><strong>JMM</strong>三大特性：</p>
<ol>
<li><p>可见性</p>
<p>一个线程修改了主内存中的值，其他线程回马上收到通知，进行同步。</p>
<p>通过前面对<strong>JMM</strong>的介绍，我们知道各个线程对主内存中共享变量的操作都是各个线程各自拷贝到自己工作内存进行操作后再写回到主内存中的。</p>
<p>这就可能存在一个线程<code>0x00</code>修改了共享变量<strong>X</strong>的值但还未写回主内存时，另一个线程<code>0x01</code>又对主内存中同一个共享变量<strong>X</strong>进行操作，但此时<code>0x00</code>线程工作内存中共享变量<strong>X</strong>对线程<code>0x01</code>来说并不可见。</p>
<p><strong>这种工作内存与主内存同步延迟现象就造成了可见性问题。</strong></p>
</li>
<li><p>原子性</p>
<p><strong>number++</strong>在多线程环境下是非线程安全的，如何不加synchronized解决</p>
<p>![屏幕快照 2020-05-23 18.41.53](/Users/allwayz/Desktop/屏幕快照 2020-05-23 18.41.53.png)</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 使用原子类来进行</span></span><br><span class="line"><span class="comment">* AotmicInteger</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMyAtomic</span><span class="params">()</span></span>&#123;</span><br><span class="line">    atomicInteger.getAndIncrement();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<ol start="3">
<li><p><code>VolatileDemo</code>演示<strong>可见性</strong>➕<strong>原子性</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 验证volatile的可见性&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 1.1 加入 int number = 0; number变量之前没有添加volatile关键字修饰&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;main线程没有收到number变化的消息&lt;/b&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 1.2 在 int number = 0; 前面加上 volatile&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;main线程在number改变的时候就监测到新的值&lt;/b&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> allwayz</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyData myData = <span class="keyword">new</span> MyData();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"\t come in..."</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            myData.addT060();</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"\t number ==&gt; 60"</span>);</span><br><span class="line">        &#125;,<span class="string">"input thread-AAA"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (myData.number == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"\t mission is over! number = "</span>+myData.number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyData</span></span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addT060</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = <span class="number">60</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<ol start="4">
<li><p>有序性</p>
<p>计算机在执行程序时，为了提高性能，编译器和处理器的常常会对指令做重排，一般分以下三种</p>
<p><strong>源代码</strong> –&gt; <u><strong>编译器优化的重排</strong></u> –&gt; <u><strong>指令并行的重排</strong></u> –&gt; <u><strong>内存系统的重排</strong></u> –&gt; <strong>最终的指令</strong></p>
<p>单线程环境里面确保程序最终执行结果和代码顺序执行的结果一致</p>
<p>处理器在进行重排序时必须要考虑指令之间的<u><strong>数据依赖性</strong></u></p>
<p>多线程环境中线程交替执行，由于编译器优化重排的存在，两个线程中使用的变量能否保证一致性时无法确定的，结果无法预测。</p>
<ul>
<li><p>重排 0x00</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mySort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">11</span>;	<span class="comment">//语句1</span></span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">12</span>;	<span class="comment">//语句2</span></span><br><span class="line">    x = x + <span class="number">5</span>;	<span class="comment">//语句3</span></span><br><span class="line">    y = x * x;	<span class="comment">//语句4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p> 执行顺序可能不一样</p>
</li>
<li><p>重排 0x01</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a,b,x,y = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></div>

<table>
<thead>
<tr>
<th>Thread 0x00</th>
<th>Thread 0x01</th>
</tr>
</thead>
<tbody><tr>
<td>x = a;</td>
<td>y = b;</td>
</tr>
<tr>
<td>b = 1;</td>
<td>a = 2;</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>x = 0;    y = 0;</td>
<td></td>
</tr>
</tbody></table>
<p>如果编译器对这段程序代码执行重排优化后，可能出现下列情况</p>
<table>
<thead>
<tr>
<th>Thread 0x00</th>
<th>Thread 0x01</th>
</tr>
</thead>
<tbody><tr>
<td>b = 1;</td>
<td>a = 2;</td>
</tr>
<tr>
<td>x = a;</td>
<td>y = b;</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>x = 2;   y = 1;</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li><p>案例</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReSortSeqDemo</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//多线程环境下，由于编译器优化重排的存在。</span></span><br><span class="line">    <span class="comment">//两个线程中使用的变量能否保证一致性，是无法确定的，结果无法预测</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            a = a + <span class="number">5</span>;</span><br><span class="line">            System.out.println(<span class="string">"retValue: "</span> + a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li><p>禁止指令重排小总结</p>
<p>volatile<u><strong>实现禁止指令重排优化</strong></u>，从而避免多线程环境下程序出现乱序执行的现象。<br>先了解一个概念， 内存屏障（<em>Memory Barrier</em>）又称内存栅栏，是一个CPU指令，他的作用有两个</p>
<ol>
<li><p>保证特定操作的执行顺序</p>
</li>
<li><p>保证某些变量的内存可见性（利用该特性实现<strong>volatile</strong>的内存可见性）</p>
<p>由于编译器和处理器都能执行指令重排优化。如果在指令间插入一条Memory Barrier则会告诉编译器和CPU，不管什么指令都不能和这条Memory Barrier指令重排序，也就是说<strong>通过插入内存屏障禁止在内存屏障前后的指令集执行重排序优化</strong>。内存屏障另外一个作用时强制刷出各种CPU的缓存数据，因此任何CPU上的线程都能读取到这些数据的最新版本。</p>
</li>
</ol>
</li>
</ul>
<h3 id="有了JMM，线程安全性获得保障"><a href="#有了JMM，线程安全性获得保障" class="headerlink" title="有了JMM，线程安全性获得保障"></a><strong>有了JMM，线程安全性获得保障</strong></h3><ul>
<li><p>工作内存与主内存同步延迟现象导致的可见性问题</p>
<p>可以使用<code>synchronized</code>和<code>volatile</code>关键字解决，他们都可以使一个线程<strong>修改后的变量立即对其他线程可见</strong></p>
</li>
<li><p>对于指令重排导致的可见性问题和有序性问题</p>
<p>可以使用volatile关键字解决，因为volatile的另外一个作用就是禁止重排序优化。</p>
<p>​    </p>
</li>
</ul>
<h3 id="在那些地方使用过volatile"><a href="#在那些地方使用过volatile" class="headerlink" title="在那些地方使用过volatile"></a>在那些地方使用过volatile</h3><ul>
<li>最经典的案例：单例模式</li>
<li>读写锁  手写一个缓存</li>
<li>CAS （JUC的包里面大规模使用valatile）</li>
</ul>
<h4 id="单例模式DCL代码"><a href="#单例模式DCL代码" class="headerlink" title="单例模式DCL代码"></a>单例模式DCL代码</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DCL (Double Check Lock)双端检锁机制&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 加锁之前和之后都进行判断</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SingletonDemo<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                instance = <span class="keyword">new</span> SingletonDemo();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="单例模式volatile分析"><a href="#单例模式volatile分析" class="headerlink" title="单例模式volatile分析"></a>单例模式volatile分析</h4><p>DCL（双端检锁）机制不一定线程安全，原因是有指令重排的存在，加入volatile可以禁止指令重排</p>
<p>原因在于一个线程指定到第一次检测，读取到的instance != null时，instance的引用对象<strong>可能没有完成初始化</strong>。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">instance &#x3D; new SignletonDemo();</span><br><span class="line">&#x2F;&#x2F;可以分为以下三步完成</span><br><span class="line">memory &#x3D; allcate(); &#x2F;&#x2F;1.分配对象内存空间</span><br><span class="line"></span><br><span class="line">instance(memory);	&#x2F;&#x2F;2.初始化对象</span><br><span class="line"></span><br><span class="line">instance &#x3D; memory;	&#x2F;&#x2F;3.设置instance只想刚分配的内存地址，此时 instance !&#x3D; null</span><br></pre></td></tr></table></figure></div>

<p>步骤2和步骤3<strong><u>不存在数据依赖关系</u></strong>，而且无论重排前还是重排后程序的执行结果在单线程中并没有改变，因此这种重排优化时允许的。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">instance &#x3D; new SignletonDemo();</span><br><span class="line">&#x2F;&#x2F;可以分为以下三步完成</span><br><span class="line">memory &#x3D; allcate(); &#x2F;&#x2F;1.分配对象内存空间</span><br><span class="line"></span><br><span class="line">instance &#x3D; memory;	&#x2F;&#x2F;3.设置instance只想刚分配的内存地址</span><br><span class="line">&#x2F;&#x2F;此时 instance !&#x3D; null,但是对象还没有初始化完成！</span><br><span class="line"></span><br><span class="line">instance(memory);	&#x2F;&#x2F;2.初始化对象</span><br></pre></td></tr></table></figure></div>

<p>但是指令重排只会保证串行语义的执行的一致性（单线程），但并不会关心多线程间的语义一致性。</p>
<p><strong>所以当一条线程访问instance不为null时，由于instance实例未必已完成初始化，也就造成了线程安全问题。</strong></p>
]]></content>
      <tags>
        <tag>JUC</tag>
      </tags>
  </entry>
  <entry>
    <title>探索前后端分离-1：RESTful Login该如何实现（未完成）</title>
    <url>/2020/03/20/%E6%8E%A2%E7%B4%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB-1%EF%BC%9ARESTful-Login%E8%AF%A5%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>前后端分离</tag>
      </tags>
  </entry>
  <entry>
    <title>探索前后端分离-0：RESTful API</title>
    <url>/2020/03/20/%E6%8E%A2%E7%B4%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB-0%EF%BC%9ARESTful-API/</url>
    <content><![CDATA[<blockquote>
<p><code>jsp</code>、<code>servlet</code>➕<code>SpringBoot</code>这样的前后端耦合在一起的开发实在太难熬了！</p>
<p>如果同一个应用，每新开发一个平台都要重新写业务逻辑，那也太费事儿了8⃣️。<br>于是我发现只需在新的平台上开发UI界面，然后共用一套后端接口，那么代码的开发就变的优雅了起来。</p>
</blockquote>
<a id="more"></a>

<p><a href="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/publicImage/%E6%8E%A2%E7%B4%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB-0/MacPro2019.png" target="_blank" rel="noopener"><img src="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/publicImage/%E6%8E%A2%E7%B4%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB-0/MacPro2019.png" alt="壁纸"></a></p>
<p><em>前后端分离主要不是使用什么样的技术，而是为什么要前后端分离。</em></p>
<p>[TOC]</p>
<h2 id="基于JSP的Java-web"><a href="#基于JSP的Java-web" class="headerlink" title="基于JSP的Java web"></a>基于JSP的Java web</h2><p><code>JSP</code>(<strong>J</strong>ava <strong>S</strong>erver <strong>P</strong>ages)，是一种服务端的网页模版技术，支持JSTL标准标签库，在传统HTML页面中插入可以在页面中执行的Java代码段。<code>JSP</code>是互联网开发中比较老的技术，以现在的技术来审视JSP不难发现JSP是一个高耦合性的东西。</p>
<h3 id="JSP技术"><a href="#JSP技术" class="headerlink" title="JSP技术"></a>JSP技术</h3><p><em>什么叫服务端的网页模版技术呢？常见的网页是由<strong>样式</strong>➕<strong>数据</strong>构成的，当我们把数据全部去掉，就剩一个网页的架子，即网页模版。</em></p>
<h3 id="JSP网页是如何开发的？"><a href="#JSP网页是如何开发的？" class="headerlink" title="JSP网页是如何开发的？"></a>JSP网页是如何开发的？</h3><p>前端工程师写好<code>HTML</code>，<code>CSS</code>，<code>js</code>动态效果等</p>
<p>后端工程师写好后端逻辑，<code>Servlet</code>，数据库操作等等</p>
<p><em>这个时候前后端如何联系呢？</em></p>
<p>前端工程师把写好了的<code>HTML</code>页面交个后端工程师，这个时候页面是写死的，后端工程师需要把<code>HTML</code>换成<code>JSP</code>，然后写一些<code>JSP</code>标签或者<code>Java</code>代码把需要动态显示的数据添加到JSP页面中去。</p>
<p>这时候前后端就有很强的依赖。需要后端工程师懂一些HTML，css之类的语法，也需要前端工程师懂的一些Java的语法。</p>
<h2 id="前后端分离的Java-web"><a href="#前后端分离的Java-web" class="headerlink" title="前后端分离的Java web"></a>前后端分离的Java web</h2><p>前后端之间通过<strong>约定接口</strong>，<strong>数据样式</strong>，<strong>参数格式</strong>来进行开发。</p>
<p>前后端可以并行开发，前后端单独部署。前端只从后端那数据，页面渲染工作只交给前端服务器进行。静态资源也不再由后端完成。后端只需要提供数据接口，接收到请求之后跟数据沟通就可以了。</p>
<h2 id="为什么要进行前后端分离呢？"><a href="#为什么要进行前后端分离呢？" class="headerlink" title="为什么要进行前后端分离呢？"></a>为什么要进行前后端分离呢？</h2><p>在以前<code>JSP</code>模版开发的时候，前后端耦合在一起做，套模版的操作比比皆是。</p>
<p>原因是这样的：这里引用<a href="https://www.codesheep.cn" target="_blank" rel="noopener">CodeSheep</a>的话来说：前端开发没有像后端这样工程化，模块化和可复用化的开发思维。 </p>
<p>所以前后端分离的原因是前后端的工作分来开做。把前端工程师的工作从后端工程师身上拿掉，也让前端工程师不再参与后端工程师的活儿。让前端工程是也需要工程化项目化的思维来做。这样看来，前后端分离不是一个技术问题，而是一个工程化考量和项目管理的问题。</p>
<h2 id="技术上问题怎么解决呢"><a href="#技术上问题怎么解决呢" class="headerlink" title="技术上问题怎么解决呢"></a>技术上问题怎么解决呢</h2><p>前端慢慢出现了<strong>vue.js</strong>, <strong>react.js</strong>等等的前端组件化开发框架。随着node的出现，前端开发也借助node来开发各种各样的工具，比如npm包管理器，预编译工具等等。</p>
<p><a href="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/publicImage/%E6%8E%A2%E7%B4%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB-0/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB.png" target="_blank" rel="noopener"><img src="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/publicImage/%E6%8E%A2%E7%B4%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB-0/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB.png" alt="前后端"></a></p>
<h2 id="前后端分离的实施"><a href="#前后端分离的实施" class="headerlink" title="前后端分离的实施"></a>前后端分离的实施</h2><p>一个标准的软件开发生命周期为例，分为需求分析，系统分析与设计，系统实现，测试和维护。</p>
<p>真正的前后端分离应该渗透到以上的每一个步骤。</p>
<p>需求分析之后，前后端根据需求来约定接口，之后就可以各干各的了。</p>
<p>前端负责开发UI页面，所有的数据也可以通过Mock服务器来模拟，并不需要实时的后端接口。</p>
<p>后端负责考量系统的设计，比如系统架构中的数据库，中间件，缓存，分布式架构等。主要考虑性能、容量、可扩展性、可维护性等等。然后实现接口来为前端提供数据即可。</p>
<p>前后端项目独立部署，不需要迁就某一方面。</p>
<p><strong>以上就是我认识的前后端分离，能力有限，一点浅见拙识</strong> </p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.codesheep.cn" target="_blank" rel="noopener">CodeSheep</a></p>
<p><a href="https://allwayz.github.io" target="_blank" rel="noopener">Allwayz</a></p>
]]></content>
      <tags>
        <tag>前后端分离</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Boot-摸索之路-7：Spring-Boot中使用JSP、Ajax</title>
    <url>/2020/02/18/Spring-Boot-%E6%91%B8%E7%B4%A2%E4%B9%8B%E8%B7%AF-7%EF%BC%9ASpring-Boot%E4%B8%AD%E4%BD%BF%E7%94%A8JSP%E3%80%81Ajax/</url>
    <content><![CDATA[<blockquote>
<p>案例是动态生成下拉菜单，使用Ajax从Controller请求JSON对象</p>
</blockquote>
<a id="more"></a>



<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p><strong>具体环境看上一篇<a href="[https://allwayz.github.io/2020/02/18/Spring-Boot-%E6%91%B8%E7%B4%A2%E4%B9%8B%E8%B7%AF-6%EF%BC%9ASpring-Boot-%E9%9B%86%E6%88%90JSP/](https://allwayz.github.io/2020/02/18/Spring-Boot-摸索之路-6：Spring-Boot-集成JSP/)">博客</a></strong></p>
<ul>
<li><p>数据库准备</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`user_password`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`user_email`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`create_time`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="string">`update_time`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="string">`is_delete`</span> <span class="built_in">tinyint</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  <span class="string">`role_id`</span> <span class="built_in">int</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`user_dtl_id`</span> <span class="built_in">int</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`user_id`</span>) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`role_id`</span> (<span class="string">`role_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`user_dtl_id`</span> (<span class="string">`user_dtl_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`role_id`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`role_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`role`</span> (<span class="string">`role_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`user_dtl_id`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`user_dtl_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`user_dtl`</span> (<span class="string">`user_dtl_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">7</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'666666'</span>, <span class="string">'xxxxxxxx@126.com'</span>, <span class="string">'2020-02-13 11:50:32'</span>, <span class="string">'2020-02-13 11:50:32'</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'123456'</span>, <span class="string">'xxxxxxx@126.com'</span>, <span class="string">'2020-02-13 12:11:01'</span>, <span class="string">'2020-02-13 12:11:01'</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'123456'</span>, <span class="string">'xxxxxx@qq.com'</span>, <span class="string">'2020-02-13 12:14:10'</span>, <span class="string">'2020-02-13 12:14:10'</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">'123456'</span>, <span class="string">'xxxxxx@qq.com'</span>, <span class="string">'2020-02-13 12:13:45'</span>, <span class="string">'2020-02-13 12:13:45'</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">'123456'</span>, <span class="string">'xxxxxx@126.com'</span>, <span class="string">'2020-02-13 12:14:34'</span>, <span class="string">'2020-02-13 12:14:34'</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">'123456'</span>, <span class="string">'xxxxxx@qq.com'</span>, <span class="string">'2020-02-16 04:37:28'</span>, <span class="string">'2020-02-16 04:37:28'</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<h2 id="创建一个JSP文件"><a href="#创建一个JSP文件" class="headerlink" title="创建一个JSP文件"></a>创建一个JSP文件</h2><p><strong>Test.jsp</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: allwayz</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">2</span>/<span class="number">18</span></span><br><span class="line">  Time: <span class="number">01</span>:<span class="number">03</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Test&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%--下拉菜单--%&gt;</span><br><span class="line">    &lt;select id=<span class="string">"user"</span> &gt;</span><br><span class="line">        &lt;option&gt;</span><br><span class="line">            user</span><br><span class="line">        &lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h2 id="创建Controller"><a href="#创建Controller" class="headerlink" title="创建Controller"></a>创建Controller</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//自动注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/Test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/showUser"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">showUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(<span class="keyword">new</span> QueryWrapper&lt;User&gt;());</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="引入Jquery包"><a href="#引入Jquery包" class="headerlink" title="引入Jquery包"></a>引入Jquery包</h2><p><a href="http://code.jquery.com/jquery-2.x-git.js" target="_blank" rel="noopener">jquery库</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"js/jquery-3.4.1.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div>



<h2 id="Ajax发送请求"><a href="#Ajax发送请求" class="headerlink" title="Ajax发送请求"></a>Ajax发送请求</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type:<span class="string">"GET"</span>,</span><br><span class="line">                url:<span class="string">"showUser"</span>,</span><br><span class="line">                dataType: <span class="string">"json"</span>,</span><br><span class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> str =<span class="string">"&lt;div&gt;&lt;select&gt;"</span></span><br><span class="line">                    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</span><br><span class="line">                        str +=<span class="string">"&lt;option value='"</span>+data[i].user_email+<span class="string">"'&gt;"</span>+data[i].user_email+<span class="string">"&lt;/option&gt;"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    str +=<span class="string">"&lt;/select&gt;&lt;/div&gt;"</span></span><br><span class="line">                    $(<span class="string">"#user"</span>).html(str)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div>



<h3 id="运行程序就可以看到下拉菜单被自动加载了"><a href="#运行程序就可以看到下拉菜单被自动加载了" class="headerlink" title="运行程序就可以看到下拉菜单被自动加载了"></a>运行程序就可以看到下拉菜单被自动加载了</h3><hr>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://allwayz.github.io/" target="_blank" rel="noopener">Allwayz</a></p>
]]></content>
      <tags>
        <tag>Spring-Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Boot-摸索之路-6：Spring-Boot 集成JSP</title>
    <url>/2020/02/18/Spring-Boot-%E6%91%B8%E7%B4%A2%E4%B9%8B%E8%B7%AF-6%EF%BC%9ASpring-Boot-%E9%9B%86%E6%88%90JSP/</url>
    <content><![CDATA[<blockquote>
<p>  我知道Spring Boot 不适合JSP这种引擎，但是学校有项目要求使用JSP来完成</p>
</blockquote>
<a id="more"></a>

<h2 id="在Maven工程中导入以下依赖"><a href="#在Maven工程中导入以下依赖" class="headerlink" title="在Maven工程中导入以下依赖"></a>在Maven工程中导入以下依赖</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JSTL for JSP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Need this to compile JSP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h2 id="在工程中建立图片中的路径"><a href="#在工程中建立图片中的路径" class="headerlink" title="在工程中建立图片中的路径"></a>在工程中建立图片中的路径</h2><p><img src="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/publicImage/Spring-Boot-%E6%91%B8%E7%B4%A2%E4%B9%8B%E8%B7%AF-6%EF%BC%9ASpring-Boot%20%E9%9B%86%E6%88%90JSP/JSP.png" alt="JSP"></p>
<h2 id="配置文件中加入以下配置"><a href="#配置文件中加入以下配置" class="headerlink" title="配置文件中加入以下配置"></a>配置文件中加入以下配置</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">view:</span></span><br><span class="line">      <span class="comment">#配置jsp文件</span></span><br><span class="line">      <span class="attr">prefix:</span> <span class="string">/WEB-INF/jsp/</span></span><br><span class="line">      <span class="attr">suffix:</span> <span class="string">.jsp</span></span><br></pre></td></tr></table></figure></div>



<h2 id="写一个JSP页面来测试一下吧！"><a href="#写一个JSP页面来测试一下吧！" class="headerlink" title="写一个JSP页面来测试一下吧！"></a>写一个JSP页面来测试一下吧！</h2><h3 id="hello-jsp"><a href="#hello-jsp" class="headerlink" title="hello.jsp"></a>hello.jsp</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: allwayz</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">2</span>/<span class="number">18</span></span><br><span class="line">  Time: <span class="number">01</span>:<span class="number">03</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;h1&gt;</span><br><span class="line">        Hello World!</span><br><span class="line">    &lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<hr>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://allwayz.github.io/" target="_blank" rel="noopener">Allwayz</a></p>
]]></content>
      <tags>
        <tag>Spring-Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Boot-摸索之路-5：MyBatis-Plus 强大的条件构造器Wrapper</title>
    <url>/2020/02/14/Spring-Boot-%E6%91%B8%E7%B4%A2%E4%B9%8B%E8%B7%AF-5%EF%BC%9AMyBatis-Plus-%E5%BC%BA%E5%A4%A7%E7%9A%84%E6%9D%A1%E4%BB%B6%E6%9E%84%E9%80%A0%E5%99%A8Wrapper/</url>
    <content><![CDATA[<blockquote>
<p>  MyBatis-Plus提供了简单的CRUD方法，这次来研究MyBatis-Plus的条件构造器。</p>
</blockquote>
<a id="more"></a>

<h1 id="构造器关系"><a href="#构造器关系" class="headerlink" title="构造器关系"></a>构造器关系</h1><p><img src="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/publicImage/Spring-Boot-%E6%91%B8%E7%B4%A2%E4%B9%8B%E8%B7%AF-5%EF%BC%9AMyBatis-Plus-%E5%BC%BA%E5%A4%A7%E7%9A%84%E6%9D%A1%E4%BB%B6%E6%9E%84%E9%80%A0%E5%99%A8Wrapper/Wrapper.png" alt="Wrapper"></p>
<ul>
<li>蓝色线连起来的是Wrapper的类，其他都是继承</li>
<li>最下边四个是正常类，可以new对象</li>
<li>加了Abstract的是抽象类</li>
<li>蓝色实线是继承关系</li>
</ul>
<h2 id="wapper介绍-："><a href="#wapper介绍-：" class="headerlink" title="wapper介绍 ："></a>wapper介绍 ：</h2><ul>
<li><code>Wrapper</code> ： 条件构造抽象类，最顶端父类，抽象类中提供4个方法西面贴源码展示</li>
<li><code>AbstractWrapper</code> ： 用于查询条件封装，生成 <strong>sql</strong> 的 <strong>where</strong> 条件</li>
<li><code>AbstractLambdaWrapper</code> ： <strong>Lambda</strong> 语法使用 <strong>Wrapper</strong>统一处理解析 <strong>lambda</strong> 获取 <strong>column</strong>。</li>
<li><code>LambdaQueryWrapper</code> ：看名称也能明白就是用于<strong>Lambda</strong>语法使用的查询<strong>Wrapper</strong></li>
<li><code>LambdaUpdateWrapper</code> ： <strong>Lambda</strong> 更新封装<strong>Wrapper</strong></li>
<li><code>QueryWrapper</code> ： <strong>Entity</strong> 对象封装操作类，不是用<strong>lambda</strong>语法</li>
<li><code>UpdateWrapper</code> ： <strong>Update</strong> 条件封装，用于<strong>Entity</strong>对象更新操作</li>
</ul>
<h1 id="构造器方法"><a href="#构造器方法" class="headerlink" title="构造器方法"></a>构造器方法</h1><table>
<thead>
<tr>
<th>FunctionName</th>
<th>Desc</th>
<th>Example</th>
</tr>
</thead>
<tbody><tr>
<td>eq( );</td>
<td>等于      =</td>
<td>eq(“name”,”Allwayz”) -&gt; name = ‘Allwayz’</td>
</tr>
<tr>
<td>ne( );</td>
<td>不等于   !=</td>
<td>ne(“name”,”Allwayz”) -&gt; name&lt;&gt;’Allwayz’</td>
</tr>
<tr>
<td>gt( );</td>
<td>大于      &gt;</td>
<td>gt(“age”,18) -&gt; age &gt; 18</td>
</tr>
<tr>
<td>ge( );</td>
<td>大于等于 &gt;=</td>
<td>ge(“age”,18) -&gt; age &gt;= 18</td>
</tr>
<tr>
<td>lt( );</td>
<td>小于    &lt;</td>
<td>lt(“age”,18) -&gt; age &lt; 18</td>
</tr>
<tr>
<td>le( );</td>
<td>小于等于 &lt;=</td>
<td>le(“age”,18) -&gt; age &lt;= 18</td>
</tr>
<tr>
<td>between( );</td>
<td>BETWEEN</td>
<td>between(“age”,18,30) -&gt; age between 18 and 30</td>
</tr>
<tr>
<td>notBetween( );</td>
<td>NOT BETWEEN</td>
<td>notBetween(“age”,18,30) -&gt; age not between 18 and 30</td>
</tr>
<tr>
<td>like( );</td>
<td>LIKE ‘%value%’</td>
<td>like(“name”,”All”) -&gt; name like ‘%All%’</td>
</tr>
<tr>
<td>notLike( );</td>
<td>NOT LIKE ‘%value%’</td>
<td>notLike(“name”,”All”) -&gt; name not like ‘%All%’</td>
</tr>
<tr>
<td>likeLeft( );</td>
<td>LIKE ‘%value’</td>
<td>likeLeft(“name”,”All”) -&gt; name like ‘%All’</td>
</tr>
<tr>
<td>likeRight( );</td>
<td>LIKE ‘value%’</td>
<td>likeRight(“name”,”All”) -&gt; name like ‘All%’</td>
</tr>
<tr>
<td>isNull( );</td>
<td>Value IS NULL</td>
<td>isNull(“name”) -&gt;name is null</td>
</tr>
<tr>
<td>isNotNull( );</td>
<td>Value IS NOT NULL</td>
<td>isNotNull(“name”) -&gt;name is not null</td>
</tr>
<tr>
<td>in( );</td>
<td>Value IN(v0,v1…)</td>
<td>in(“age”,{1,2,3}) -&gt; age in (1,2,3)</td>
</tr>
<tr>
<td>notIn( );</td>
<td>Value NOT IN(v0,v1…)</td>
<td>notIn(“age”,{1,2,3}) -&gt; age not in (1,2,3)</td>
</tr>
<tr>
<td>inSql( );</td>
<td>Value IN(sql)</td>
<td>inSql(“id”,”Select id from table where id &lt; 3”) -&gt; id in (Select id from table where id &lt; 3)</td>
</tr>
<tr>
<td>notInSql( );</td>
<td>Value NOT IN(sql)</td>
<td>notInSql(“id”,”Select id from table where id &lt; 3”) -&gt; id not in (Select id from table where id &lt; 3)</td>
</tr>
<tr>
<td>groupBy( );</td>
<td>分组</td>
<td>groupBy(“id”,”name”) -&gt; group by id, name</td>
</tr>
<tr>
<td>orderByAsc( );</td>
<td>升序排列</td>
<td>orderByAsc(“id”,”name”) -&gt; order by id ASC, name ASC</td>
</tr>
<tr>
<td>orderByDesc( );</td>
<td>降序排列</td>
<td>orderByDesc(“id”,”name”) -&gt; order by id DESC, nameDESC</td>
</tr>
<tr>
<td>orderBy( );</td>
<td>排列</td>
<td>orderBy(true, true,”id”,”name”) -&gt; order by id ASC, name ASC</td>
</tr>
<tr>
<td>having( );</td>
<td>HAVING(sql)</td>
<td>having(“sum(age) &gt; {0}”,11) -&gt; having sum (age) &gt;11</td>
</tr>
<tr>
<td>or( );</td>
<td>拼接 OR</td>
<td></td>
</tr>
<tr>
<td>and( );</td>
<td>AND 嵌套</td>
<td></td>
</tr>
<tr>
<td>apply( );</td>
<td>拼接 sql</td>
<td></td>
</tr>
<tr>
<td>last( )</td>
<td>无视优化规则直接拼接到sql最后</td>
<td></td>
</tr>
<tr>
<td>exists( );</td>
<td>拼接 EXISTS（sql）</td>
<td></td>
</tr>
<tr>
<td>notExists( );</td>
<td>拼接 NOT EXIXSTS （sql）</td>
<td></td>
</tr>
<tr>
<td>nested( );</td>
<td>正常嵌套 不带AND OR</td>
<td></td>
</tr>
</tbody></table>
<h1 id="使用过程"><a href="#使用过程" class="headerlink" title="使用过程"></a>使用过程</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Fuzzy query</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectMajor</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Major&gt; majorList = majorMapper</span><br><span class="line">        .selectList(<span class="keyword">new</span> QueryWrapper&lt;Major&gt;().like(<span class="string">"major_code"</span>,<span class="string">"MC_506"</span>));</span><br><span class="line">    majorList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>控制台</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="VERILOG"><figure class="iseeu highlight /verilog"><table><tr><td class="code"><pre><span class="line">JDBC Connection [HikariProxyConnection@<span class="number">2005675644</span> wrapping com<span class="variable">.mysql</span><span class="variable">.cj</span><span class="variable">.jdbc</span><span class="variable">.ConnectionImpl</span>@b70fa38] will <span class="keyword">not</span> be managed by Spring</span><br><span class="line"><span class="comment">// SQL语句</span></span><br><span class="line">==&gt;  Preparing: SELECT major_id,major_code,major_name,major_status,create_time,update_time,is_delete FROM major WHERE is_delete=<span class="number">0</span> AND (major_code LIKE ?) </span><br><span class="line"><span class="comment">//变量</span></span><br><span class="line">==&gt; Parameters: %MC_506%(String)</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">&lt;==    Columns: major_id, major_code, major_name, major_status, create_time, update_time, is_delete</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, MC_50601, History of Architecture, <span class="literal">null</span>, <span class="number">2020</span>-<span class="number">02</span>-<span class="number">14</span> <span class="number">15</span>:<span class="number">00</span>:<span class="number">21</span>, <span class="number">2020</span>-<span class="number">02</span>-<span class="number">14</span> <span class="number">15</span>:<span class="number">00</span>:<span class="number">21</span>, <span class="number">0</span></span><br><span class="line">&lt;==        Row: <span class="number">8</span>, MC_50602, International System in the <span class="number">20</span>th Century, <span class="literal">null</span>, <span class="number">2020</span>-<span class="number">02</span>-<span class="number">14</span> <span class="number">15</span>:<span class="number">30</span>:<span class="number">00</span>, <span class="number">2020</span>-<span class="number">02</span>-<span class="number">14</span> <span class="number">15</span>:<span class="number">30</span>:<span class="number">00</span>, <span class="number">0</span></span><br><span class="line">&lt;==        Row: <span class="number">9</span>, MC_50603, Ancient Greece:Myth,Art,War, <span class="literal">null</span>, <span class="number">2020</span>-<span class="number">02</span>-<span class="number">14</span> <span class="number">15</span>:<span class="number">32</span>:<span class="number">37</span>, <span class="number">2020</span>-<span class="number">02</span>-<span class="number">14</span> <span class="number">15</span>:<span class="number">32</span>:<span class="number">37</span>, <span class="number">0</span></span><br><span class="line">&lt;==      Total: <span class="number">3</span></span><br><span class="line">Closing non transactional SqlSession </span><br><span class="line">[org<span class="variable">.apache</span><span class="variable">.ibatis</span><span class="variable">.session</span><span class="variable">.defaults</span><span class="variable">.DefaultSqlSession</span>@<span class="number">38</span>c460e8]</span><br><span class="line">Major(majorId=<span class="number">1</span>, majorCode=MC_50601, majorName=History of Architecture, majorStatus=<span class="literal">null</span>, createTime=<span class="number">2020</span>-<span class="number">02</span>-<span class="number">14</span>T15:<span class="number">00</span>:<span class="number">21</span>, updateTime=<span class="number">2020</span>-<span class="number">02</span>-<span class="number">14</span>T15:<span class="number">00</span>:<span class="number">21</span>, isDelete=<span class="number">0</span>)</span><br><span class="line">Major(majorId=<span class="number">8</span>, majorCode=MC_50602, majorName=International System in the <span class="number">20</span>th Century, majorStatus=<span class="literal">null</span>, createTime=<span class="number">2020</span>-<span class="number">02</span>-<span class="number">14</span>T15:<span class="number">30</span>, updateTime=<span class="number">2020</span>-<span class="number">02</span>-<span class="number">14</span>T15:<span class="number">30</span>, isDelete=<span class="number">0</span>)</span><br><span class="line">Major(majorId=<span class="number">9</span>, majorCode=MC_50603, majorName=Ancient Greece:Myth,Art,War, majorStatus=<span class="literal">null</span>, createTime=<span class="number">2020</span>-<span class="number">02</span>-<span class="number">14</span>T15:<span class="number">32</span>:<span class="number">37</span>, updateTime=<span class="number">2020</span>-<span class="number">02</span>-<span class="number">14</span>T15:<span class="number">32</span>:<span class="number">37</span>, isDelete=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>Spring-Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Boot-摸索之路-4：Jetbrick-template生成邮件模版</title>
    <url>/2020/02/12/Spring-Boot-%E6%91%B8%E7%B4%A2%E4%B9%8B%E8%B7%AF-4%EF%BC%9AJetbrick-template%E7%94%9F%E6%88%90%E9%82%AE%E4%BB%B6%E6%A8%A1%E7%89%88/</url>
    <content><![CDATA[<blockquote>
<p>  接上篇博客<a href="http://allwayz.github.io/2020/02/11/Spring-Boot-%E6%91%B8%E7%B4%A2%E4%B9%8B%E8%B7%AF-3%EF%BC%9AAuthenticate-users-by-E-mail/" target="_blank" rel="noopener">Authenticate-user-by-Email</a></p>
</blockquote>
<a id="more"></a>

<h1 id="Maven导入Jetx依赖"><a href="#Maven导入Jetx依赖" class="headerlink" title="Maven导入Jetx依赖"></a>Maven导入Jetx依赖</h1><ul>
<li><a href="https://github.com/subchen/jetbrick-template-2x/blob/master/README.md" target="_blank" rel="noopener">开发文档</a>中提到，Release 版本已发布到 Maven 中央库： <a href="http://central.maven.org/maven2/com/github/subchen/" target="_blank" rel="noopener">http://central.maven.org/maven2/com/github/subchen/</a></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.subchen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetbrick-template<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="类路径下创建后缀为jetx的文件"><a href="#类路径下创建后缀为jetx的文件" class="headerlink" title="类路径下创建后缀为jetx的文件"></a>类路径下创建后缀为<strong>jetx</strong>的文件</h1><p>模版中的代码用<code>HTML5</code>的格式写就行。</p>
<p><code>Test.jetx</code></p>
<p><strong>⚠️注意！！！</strong> <code>jetx</code>文件需要把邮件内容放在<code>div</code>标签中，不需要加其他<code>HTML</code>的元素。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Dear <span class="tag">&lt;<span class="name">b</span>&gt;</span>$&#123;username&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span>, 欢迎加入!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一封测试邮件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">p</span>&gt;</span>这里测试链接  $&#123;url&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">p</span>&gt;</span>这里测试字符串 $&#123;string&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">p</span>&gt;</span>-----------------------<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">p</span>&gt;</span>(这是Jetx引擎的模版，请勿回复)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h1 id="MailUtil类中写方法"><a href="#MailUtil类中写方法" class="headerlink" title="MailUtil类中写方法"></a>MailUtil类中写方法</h1><ul>
<li><p>配置<strong>JetEngine</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">JetEngine engine = JetEngine.create();</span><br><span class="line">JetTemplate template = engine.getTemplate(<span class="string">"/templates/JetxTemplates/Test.jetx"</span>);</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<ul>
<li><p>替换变量</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; context = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        context.put(<span class="string">"username"</span>, <span class="string">"User"</span>);</span><br><span class="line">        context.put(<span class="string">"string"</span>, <span class="string">"this is string"</span>);</span><br><span class="line">        context.put(<span class="string">"url"</span>, <span class="string">"&lt;a href='http://www.baidu.com&lt;'&gt;http://www.baidu.com&lt;/a&gt;"</span>);</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<ul>
<li><p>调用<code>OhMyEmail</code>中的<code>Send()</code>发送邮件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">OhMyEmail.subject(<span class="string">"这是一封测试Jetx模版的邮件"</span>)</span><br><span class="line">                .from(<span class="string">"Allwayz"</span>)</span><br><span class="line">                .to(TO_EMAIL)</span><br><span class="line">                .html(output)</span><br><span class="line">                .send();</span><br><span class="line">        Assert.assertTrue(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(<span class="string">"Send..."</span>);</span><br></pre></td></tr></table></figure></div>


</li>
</ul>
<h2 id="完整的发送类"><a href="#完整的发送类" class="headerlink" title="完整的发送类"></a>完整的发送类</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> email</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> SendMailException</span></span><br><span class="line"><span class="comment">*/</span>    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendTestEmail</span><span class="params">(String email, String string, String user)</span> </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> SendMailException </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        JetEngine engine = JetEngine.create();</span><br><span class="line">        JetTemplate template = engine.getTemplate(<span class="string">"/templates/JetxTemplates/test.jetx"</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; context = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        context.put(<span class="string">"username"</span>, user);</span><br><span class="line">        context.put(<span class="string">"string"</span>, string);</span><br><span class="line">        context.put(<span class="string">"url"</span>, <span class="string">"&lt;a href='http://www.baidu.com&lt;'&gt;http://www.baidu.com&lt;/a&gt;"</span>);</span><br><span class="line"></span><br><span class="line">        StringWriter writer = <span class="keyword">new</span> StringWriter();</span><br><span class="line">        template.render(context, writer);</span><br><span class="line">        String output = writer.toString();</span><br><span class="line">        System.out.println(output);</span><br><span class="line"></span><br><span class="line">        OhMyEmail.subject(<span class="string">"Welcome to FreeSeed"</span>)</span><br><span class="line">                .from(<span class="string">"Allwayz"</span>)</span><br><span class="line">                .to(email)</span><br><span class="line">                .html(output)</span><br><span class="line">                .send();</span><br><span class="line">        Assert.assertTrue(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(<span class="string">"Send Success..."</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>


<p>​    </p>
<h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEmail</span><span class="params">()</span> <span class="keyword">throws</span> SendMailException</span>&#123;</span><br><span class="line">       String email = <span class="string">"xxxxxxxx@gamil.com"</span>;</span><br><span class="line">       String username = <span class="string">"User"</span>;</span><br><span class="line">       String string = <span class="string">"this is a String"</span></span><br><span class="line">       MailUtil.sendTestEmail(email,string,username);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>





<hr>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>JetBrick-Template-2x <a href="http://subchen.github.io/jetbrick-template/2x/overview.html" target="_blank" rel="noopener">Documentation</a></p>
<p>JetBrick-Template Github<a href="https://github.com/subchen/jetbrick-template-2x" target="_blank" rel="noopener">源码</a></p>
<p><a href="https://allwayz.github.io/" target="_blank" rel="noopener">Allwayz</a></p>
]]></content>
      <tags>
        <tag>Spring-Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 摸索之路-3：Authenticate users by E-mail</title>
    <url>/2020/02/11/Spring-Boot-%E6%91%B8%E7%B4%A2%E4%B9%8B%E8%B7%AF-3%EF%BC%9AAuthenticate-users-by-E-mail/</url>
    <content><![CDATA[<blockquote>
<p>  在很多网站或者应用第一次注册的时候都会要求验证用户，这次就来学习一个邮件验证的小工具、<br>  MailUtil是基于 <code>oh-my-email</code> 的</p>
</blockquote>
<a id="more"></a>

<h1 id="创建基于Maven的Spring-Boot-工程"><a href="#创建基于Maven的Spring-Boot-工程" class="headerlink" title="创建基于Maven的Spring Boot 工程"></a>创建基于<strong>Maven</strong>的<strong>Spring Boot</strong> 工程</h1><p>具体创建步骤不赘述了，因为只基于邮件发送功能，所以不用数据库和web之类的依赖。</p>
<h1 id="pom-xml中导入依赖"><a href="#pom-xml中导入依赖" class="headerlink" title="pom.xml中导入依赖"></a>pom.xml中导入依赖</h1><h3 id="在pom-xml中加入以下依赖："><a href="#在pom-xml中加入以下依赖：" class="headerlink" title="在pom.xml中加入以下依赖："></a>在<code>pom.xml</code>中加入以下依赖：</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.biezhi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>oh-my-email<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="配置邮件服务器"><a href="#配置邮件服务器" class="headerlink" title="配置邮件服务器"></a>配置邮件服务器</h1><ul>
<li><p>在邮箱中开启<code>POP3/IMAP/SMTP</code>服务</p>
<p><strong>这里以qq邮箱为栗子</strong>🌰</p>
</li>
</ul>
<ol>
<li><p>登陆网页邮箱，进入设置界面</p>
<p> <img src="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/publicImage/Spring-Boot-%E6%91%B8%E7%B4%A2%E4%B9%8B%E8%B7%AF-3%EF%BC%9AAuthenticate-users-by-E-mail/step1.png" alt="第一步"></p>
</li>
<li><p>设置界面中进入子菜单账户，向下翻找到<strong>POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务</strong></p>
<p> <img src="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/publicImage/Spring-Boot-%E6%91%B8%E7%B4%A2%E4%B9%8B%E8%B7%AF-3%EF%BC%9AAuthenticate-users-by-E-mail/step2.png" alt="第二步"></p>
</li>
</ol>
<ul>
<li><p>新建邮箱工具类<code>MailUtil.java</code></p>
</li>
<li><p>配置邮件服务器</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailUtil</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* 根据 OhMyEmail 的文档来配置邮件服务器</span></span><br><span class="line"><span class="comment">	*</span></span><br><span class="line"><span class="comment">	* 下面需要自行输入的参数：</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@param</span> emailAddress 发送邮件的邮箱地址</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@param</span> emailPassword 邮箱授权码</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        OhMyEmail.config(SMTP_QQ(<span class="keyword">false</span>), <span class="string">"emailAddress"</span>, <span class="string">"emailPassword"</span>);</span><br><span class="line">        <span class="comment">// 企业邮箱可以使用一下配置</span></span><br><span class="line">        <span class="comment">//OhMyEmail.config(SMTP_ENT_QQ(false), "emailAddress", "emailPassword");</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<h1 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h1><p>因为测试类需要用到邮件服务器配置，所以直接在邮箱工具类中实现</p>
<h2 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该邮箱修改为你需要测试的邮箱地址</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TO_EMAIL = <span class="string">"xxxxx@gmail.com"</span>;</span><br></pre></td></tr></table></figure></div>

<p><strong>测试类</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Param</span> TO_EAMIL 收件人地址</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> OhMyEmail #from() 发件人姓名</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> OhMyEmail #to() 收件人地址</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> OhMyEmail #text() 发送内容</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> OhMyEmail #send() 发送方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendText</span><span class="params">()</span> <span class="keyword">throws</span> SendMailException </span>&#123;</span><br><span class="line">    OhMyEmail.subject(<span class="string">"This is a Test Email"</span>)</span><br><span class="line">            .from(<span class="string">"YourName"</span>)</span><br><span class="line">            .to(TO_EMAIL)</span><br><span class="line">            .text(<span class="string">"content"</span>)</span><br><span class="line">            .send();</span><br><span class="line">    Assert.assertTrue(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="邮件模版"><a href="#邮件模版" class="headerlink" title="邮件模版"></a>邮件模版</h2><p>一般来说，很多网页或应用厂商的验证码邮件中都会有很好看的排版，所以我们这里只发送一些文字肯定是不够看的，所以可以使用一些<code>HTML</code>的模版来达到一些更漂亮的效果。</p>
<p><strong>这里再举个栗子</strong>🌰</p>
<p><img src="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/publicImage/Spring-Boot-%E6%91%B8%E7%B4%A2%E4%B9%8B%E8%B7%AF-3%EF%BC%9AAuthenticate-users-by-E-mail/Email.png" alt="Example"></p>
<p>这是怎么做到的呢。。。</p>
<p><strong>说实话，我没(meì)研究明白</strong></p>
<p>在Github主页的<a href="https://github.com/biezhi/oh-my-email/blob/master/README.md" target="_blank" rel="noopener">技术文档</a>中有详细的测试类，日后再研究。。。</p>
<p><img src="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/publicImage/Spring-Boot-%E6%91%B8%E7%B4%A2%E4%B9%8B%E8%B7%AF-3%EF%BC%9AAuthenticate-users-by-E-mail/run.jpg" alt="Run"></p>
<p>终于把模版整明白了，<a href="allwayz.github.io/2020/02/12/Spring-Boot-摸索之路-4：Jetx生成邮件模版/">点此链接</a></p>
<hr>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>GitHub源码： <a href="https://github.com/biezhi/oh-my-email" target="_blank" rel="noopener">oh-my-email</a><br><a href="https://allwayz.github.io/" target="_blank" rel="noopener">Allwayz</a></p>
]]></content>
      <tags>
        <tag>Spring-Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 摸索之路-2：MyBatis-Plus</title>
    <url>/2020/02/09/Spring-Boot-%E6%91%B8%E7%B4%A2%E4%B9%8B%E8%B7%AF-2%EF%BC%9AMyBatis-Plus/</url>
    <content><![CDATA[<blockquote>
<p>  从JPAController到MyBatis-Plus CRUD(增删改查）<br>  从Hibernate到MyBatis</p>
</blockquote>
<a id="more"></a>

<h2 id="对数据库的增删改查操作"><a href="#对数据库的增删改查操作" class="headerlink" title="对数据库的增删改查操作"></a>对数据库的增删改查操作</h2><h4 id="sql语句："><a href="#sql语句：" class="headerlink" title="sql语句："></a>sql语句：</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--增</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name</span><br><span class="line"><span class="keyword">VALUES</span> (value1,value2,value3,...);</span><br><span class="line"></span><br><span class="line"><span class="comment">--删</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> some_column=some_value;</span><br><span class="line"></span><br><span class="line"><span class="comment">--改</span></span><br><span class="line"><span class="keyword">UPDATE</span> table_name</span><br><span class="line"><span class="keyword">SET</span> column1=value1,column2=value2,...</span><br><span class="line"><span class="keyword">WHERE</span> some_column=some_value;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure></div>

<h2 id="这篇博客中的代码环境"><a href="#这篇博客中的代码环境" class="headerlink" title="这篇博客中的代码环境"></a>这篇博客中的代码环境</h2><ul>
<li><p>准备MySql数据库，建立数据表user</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">	user_id <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'ID'</span>,</span><br><span class="line">	user_name <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'name'</span>,</span><br><span class="line">	user_age <span class="built_in">INT</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'age'</span>,</span><br><span class="line">	PRIMARY <span class="keyword">KEY</span> (user_id)</span><br><span class="line">) <span class="keyword">charset</span> = utf8;</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<h2 id="一、传统Java开发中"><a href="#一、传统Java开发中" class="headerlink" title="一、传统Java开发中"></a>一、传统Java开发中</h2><h3 id="1、在没有框架封装这些sql语句的时候"><a href="#1、在没有框架封装这些sql语句的时候" class="headerlink" title="1、在没有框架封装这些sql语句的时候"></a>1、在没有框架封装这些sql语句的时候</h3><ol>
<li><p>在Service层中写CRUD的方法</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> EntityManager em;</span><br><span class="line">   </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查找所有用户</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Module&gt; <span class="title">findAllUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">       TypedQuery&lt;Module&gt; q = </span><br><span class="line">               em.createQuery(<span class="string">"SELECT u FROM User u"</span>, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">       <span class="keyword">return</span> q.getResultList();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在业务代码中调用</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">  EntityManagerFactory emf = Persistence.createEntityManagerFactory(<span class="string">"UserPU"</span>);</span><br><span class="line">  EntityManager em = emf.createEntityManager();</span><br><span class="line">  UserService userService = <span class="keyword">new</span> UserServiceImpl(em);</span><br><span class="line">   </span><br><span class="line"><span class="comment">//调用CRUD方法</span></span><br><span class="line">List&lt;User&gt; userList = userService.findAllUser();</span><br><span class="line">userList..forEach(System.out::println);</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<h3 id="2、在JPA通过数据库生成代码之后"><a href="#2、在JPA通过数据库生成代码之后" class="headerlink" title="2、在JPA通过数据库生成代码之后"></a>2、在JPA通过数据库生成代码之后</h3><h4 id="对于简单的CRUD操作"><a href="#对于简单的CRUD操作" class="headerlink" title="对于简单的CRUD操作"></a>对于简单的CRUD操作</h4><p>只需要通过<strong>数据库</strong>来自动生成<code>JPAController</code>直接调用<code>JPAController</code>就可以完成简单的CRUD操作</p>
<h4 id="如果需要自定义操作"><a href="#如果需要自定义操作" class="headerlink" title="如果需要自定义操作"></a>如果需要自定义操作</h4><ol>
<li><p>我们需要在实体类中先来<code>@NamedQuery</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NamedQueries</span>(&#123;</span><br><span class="line">    <span class="meta">@NamedQuery</span>(name = <span class="string">"User.findUserByName"</span>, query = <span class="string">"SELECT u FROM user u WHERE name like ?"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>然后在Service层中实现</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Module <span class="title">findUserByName</span><span class="params">(String xxx)</span></span>&#123;</span><br><span class="line">        EntityManager em = getEntityManager();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> em.createNamedQuery(<span class="string">"User.findUserByName"</span>,</span><br><span class="line">                User.class).setParameter("name",xxx).getSingleResult();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            em.close();</span><br><span class="line">        &#125;      </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>最后在业务代码中<code>new</code>一个<code>UserJPAController</code>的对象就可以调用方法了</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">EntityManagerFactory emf = Persistence.createEntityManagerFactory(<span class="string">"UserPU"</span>);</span><br><span class="line">  UserJPAController userJPAController = <span class="keyword">new</span> UserJPAController(emf);</span><br><span class="line"></span><br><span class="line">userJPAController.findUserByName(<span class="string">"Tony"</span>);</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<h2 id="二、使用了Spring-Boot框架和MyBatis-Plus工具之后"><a href="#二、使用了Spring-Boot框架和MyBatis-Plus工具之后" class="headerlink" title="二、使用了Spring-Boot框架和MyBatis-Plus工具之后"></a>二、使用了Spring-Boot框架和MyBatis-Plus工具之后</h2><p><a href="https://github.com/baomidou/mybatis-plus" target="_blank" rel="noopener">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
<h3 id="MyBatis-Plus官方文档"><a href="#MyBatis-Plus官方文档" class="headerlink" title="MyBatis-Plus官方文档"></a>MyBatis-Plus官方文档</h3><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul>
<li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li>
<li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li>
<li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li>
<li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li>
<li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li>
<li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li>
<li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li>
<li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li>
<li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li>
<li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li>
<li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li>
<li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li>
</ul>
<h4 id="支持数据库支持数据库"><a href="#支持数据库支持数据库" class="headerlink" title="支持数据库支持数据库"></a>支持数据库支持数据库</h4><ul>
<li>mysql 、 mariadb 、 oracle 、 db2 、 h2 、 hsql 、 sqlite 、 postgresql 、 sqlserver</li>
<li>达梦数据库 、 虚谷数据库 、 人大金仓数据库</li>
</ul>
<h2 id="使用MyBatis-Plus的自动生成工具生成Entity，Mapper，Service和Controller。"><a href="#使用MyBatis-Plus的自动生成工具生成Entity，Mapper，Service和Controller。" class="headerlink" title="使用MyBatis-Plus的自动生成工具生成Entity，Mapper，Service和Controller。"></a>使用MyBatis-Plus的自动生成工具生成<strong>Entity</strong>，<strong>Mapper</strong>，<strong>Service</strong>和<strong>Controller</strong>。</h2><h3 id="创建MyBatis-Plus-Generator工具类MyBatisGenerator"><a href="#创建MyBatis-Plus-Generator工具类MyBatisGenerator" class="headerlink" title="创建MyBatis-Plus Generator工具类MyBatisGenerator"></a>创建MyBatis-Plus Generator工具类<code>MyBatisGenerator</code></h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisGenerator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 读取控制台内容</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">scanner</span><span class="params">(String tip)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        StringBuilder help = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        help.append(<span class="string">"请输入"</span> + tip + <span class="string">"："</span>);</span><br><span class="line">        System.out.println(help.toString());</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            String ipt = scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(tip)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ipt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MybatisPlusException(<span class="string">"请输入正确的"</span> + tip + <span class="string">"！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">"/src/main/java"</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">"YourName"</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// gc.setSwagger2(true); 实体属性 Swagger2 注解</span></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">"DatabasePath"</span>);</span><br><span class="line">        <span class="comment">// dsc.setSchemaName("public");</span></span><br><span class="line">        dsc.setDriverName(<span class="string">""</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setModuleName(scanner(<span class="string">"模块名"</span>));</span><br><span class="line">        pc.setParent(<span class="string">"com.company"</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果模板引擎是 freemarker</span></span><br><span class="line">        String templatePath = <span class="string">"/templates/mapper.xml.ftl"</span>;</span><br><span class="line">        <span class="comment">// 如果模板引擎是 velocity</span></span><br><span class="line">        <span class="comment">// String templatePath = "/templates/mapper.xml.vm";</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义输出配置</span></span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 自定义配置会被优先输出</span></span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(templatePath) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span></span><br><span class="line">                <span class="keyword">return</span> projectPath + <span class="string">"/src/main/resources/mapper/"</span> + pc.getModuleName()</span><br><span class="line">                        + <span class="string">"/"</span> + tableInfo.getEntityName() + <span class="string">"Mapper"</span> + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        cfg.setFileCreate(new IFileCreate() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) &#123;</span></span><br><span class="line"><span class="comment">                // 判断自定义文件夹是否需要创建</span></span><br><span class="line"><span class="comment">                checkDir("调用默认方法创建的目录");</span></span><br><span class="line"><span class="comment">                return false;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        mpg.setCfg(cfg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置模板</span></span><br><span class="line">        TemplateConfig templateConfig = <span class="keyword">new</span> TemplateConfig();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置自定义输出模板</span></span><br><span class="line">        <span class="comment">//指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别</span></span><br><span class="line">        <span class="comment">// templateConfig.setEntity("templates/entity2.java");</span></span><br><span class="line">        <span class="comment">// templateConfig.setService();</span></span><br><span class="line">        <span class="comment">// templateConfig.setController();</span></span><br><span class="line"></span><br><span class="line">        templateConfig.setXml(<span class="keyword">null</span>);</span><br><span class="line">        mpg.setTemplate(templateConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setSuperEntityClass(<span class="string">"你自己的父类实体,没有就不用设置!"</span>);</span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 公共父类</span></span><br><span class="line">        strategy.setSuperControllerClass(<span class="string">"你自己的父类控制器,没有就不用设置!"</span>);</span><br><span class="line">        <span class="comment">// 写于父类中的公共字段</span></span><br><span class="line">        strategy.setSuperEntityColumns(<span class="string">"id"</span>);</span><br><span class="line">        strategy.setInclude(scanner(<span class="string">"表名，多个英文逗号分割"</span>).split(<span class="string">","</span>));</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">"_"</span>);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        mpg.setTemplateEngine(<span class="keyword">new</span> FreemarkerTemplateEngine());</span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>如果Import的时候发现<code>GlobalConfig</code>中的<code>set</code>方法找不到们可以去Import中删除</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.config.GlobalConfig;</span><br></pre></td></tr></table></figure></div>

<h2 id="运行MyBatisGenerator"><a href="#运行MyBatisGenerator" class="headerlink" title="运行MyBatisGenerator"></a>运行<code>MyBatisGenerator</code></h2><ol>
<li>在命令行输入需要自动生成的模块路径</li>
<li>第二行输入数据库的表名，多个字段用<code>逗号</code>隔开。</li>
</ol>
</li>
</ul>
<h2 id="编写MyBatis配置类-MyBatisConfig"><a href="#编写MyBatis配置类-MyBatisConfig" class="headerlink" title="编写MyBatis配置类 MyBatisConfig"></a>编写<strong>MyBatis配置类</strong> <code>MyBatisConfig</code></h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//MapperScan Mapper类的路径</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.company"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestUserServiceImpl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectAllUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----------Select All-------------"</span>);</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        userList.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="最后记录个小bug"><a href="#最后记录个小bug" class="headerlink" title="最后记录个小bug"></a>最后记录个小bug</h2><ol>
<li><p>Bug Description</p>
<p>在测试的代码中<code>@Autowired</code>Mapper类时，经常会遇到<code>Could not autowire. No beans of &#39;xxxx&#39; type found</code>的错误提示。但程序的编译和运行都是没有问题的，这个错误提示并不会产生影响。但红色的错误提示在有些有强迫症的程序员眼里，多多少少有些不太舒服。</p>
<p><img src="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/publicImage/Spring-Boot-%E6%91%B8%E7%B4%A2%E4%B9%8B%E8%B7%AF-2%EF%BC%9AMyBatis-Plus/Error.png" alt="Error"></p>
</li>
</ol>
<ol start="2">
<li><p>Cause</p>
<p> 原因可能有两个，第一个是<strong>IntellijIDEA</strong>本身工具的问题。第二个便是我们导入<code>@Service</code>包的时候导入包错误造成的</p>
<p>　　第一种原因，spring auto scan配置，在编辑情况下，无法找不到对应的bean，于是提示找不到对应bean的错误。常见于mybatis的mapper，如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- mapper scanner configurer --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;mapperScannerConfig&quot; class&#x3D;&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;basePackage&quot; value&#x3D;&quot;com.adu.spring_test.mybatis.dao&quot; &#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;sqlSessionFactoryBeanName&quot; value&#x3D;&quot;sqlSessionFactory&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Solution</p>
<p>针对第一种原因，解决办法是：降低<code>Autowired</code>检测的级别，将<strong>Severity</strong>的级别由之前的<strong>error</strong>改成<strong>warning</strong>或其它可以忽略的级别。</p>
</li>
</ol>
<p><img src="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/publicImage/Spring-Boot-%E6%91%B8%E7%B4%A2%E4%B9%8B%E8%B7%AF-2%EF%BC%9AMyBatis-Plus/Setting.png" alt="Setting"></p>
<p>针对第二种原因，解决方案当然是导入正确的包。首先我们来看下最容易导入的错误包，如下所示：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正确的包应该是下面这个</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br></pre></td></tr></table></figure></div>

<p>切记切记啊！！！！</p>
<hr>
<p>Reference<br><a href="https://github.com/Allwayz" target="_blank" rel="noopener">Allwayz</a></p>
]]></content>
      <tags>
        <tag>Spring-Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Mamba Out</title>
    <url>/2020/01/27/Mamba-Out/</url>
    <content><![CDATA[<p><img src="https://allwayz-blog-1259174617.cos.ap-shanghai.myqcloud.com/publicImage/Mamba-Out/Mamba_out.webp" alt="Mamba Out"></p>
<a id="more"></a>

<h1 id="The-17th-times-NBA-All-Stars"><a href="#The-17th-times-NBA-All-Stars" class="headerlink" title="The 17th times NBA All-Stars,"></a>The 17<sup>th</sup> times NBA All-Stars,</h1><h1 id="The-3rd-highest-scpre-in-the-NBA-history"><a href="#The-3rd-highest-scpre-in-the-NBA-history" class="headerlink" title="The 3rd highest scpre in the NBA history"></a>The 3<sup>rd</sup> highest scpre in the NBA history</h1><h1 id="2008-MVP"><a href="#2008-MVP" class="headerlink" title="2008 MVP"></a>2008 MVP</h1><h1 id="Two-times-NBA-Finals-MVPs"><a href="#Two-times-NBA-Finals-MVPs" class="headerlink" title="Two times NBA Finals MVPs"></a>Two times NBA Finals MVPs</h1><h1 id="Five-times-NBA-championships"><a href="#Five-times-NBA-championships" class="headerlink" title="Five times NBA championships,"></a>Five times NBA championships,</h1><h1 id="Six-foot-six-heights-from-Lower-Merion-High-School-1996-Draft"><a href="#Six-foot-six-heights-from-Lower-Merion-High-School-1996-Draft" class="headerlink" title="Six-foot-six heights, from Lower Merion High School, 1996 Draft,"></a>Six-foot-six heights, from Lower Merion High School, 1996 Draft,</h1><h1 id="No-24"><a href="#No-24" class="headerlink" title="No. 24"></a>No. 24</h1><h1 id="Kobe-Bryant"><a href="#Kobe-Bryant" class="headerlink" title="Kobe  Bryant!!!"></a>Kobe  Bryant!!!</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line"> ██████   ██████                           █████              </span><br><span class="line">░░██████ ██████                           ░░███               </span><br><span class="line"> ░███░█████░███   ██████   █████████████   ░███████   ██████  </span><br><span class="line"> ░███░░███ ░███  ░░░░░███ ░░███░░███░░███  ░███░░███ ░░░░░███ </span><br><span class="line"> ░███ ░░░  ░███   ███████  ░███ ░███ ░███  ░███ ░███  ███████ </span><br><span class="line"> ░███      ░███  ███░░███  ░███ ░███ ░███  ░███ ░███ ███░░███ </span><br><span class="line"> █████     █████░░████████ █████░███ █████ ████████ ░░████████</span><br><span class="line">░░░░░     ░░░░░  ░░░░░░░░ ░░░░░ ░░░ ░░░░░ ░░░░░░░░   ░░░░░░░░ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ███████                █████  </span><br><span class="line">  ███░░░░░███             ░░███   </span><br><span class="line"> ███     ░░███ █████ ████ ███████ </span><br><span class="line">░███      ░███░░███ ░███ ░░░███░  </span><br><span class="line">░███      ░███ ░███ ░███   ░███   </span><br><span class="line">░███      ░███ ░███ ░███   ░███   </span><br><span class="line">░░░███████░   ░░████████  ░░█████</span><br><span class="line">  ░░░░░░░      ░░░░░░░░    ░░░░░</span><br></pre></td></tr></table></figure></div>

<p>R.I.P</p>
]]></content>
      <tags>
        <tag>Kobe</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 摸索之路-1：连接MySql数据库</title>
    <url>/2020/01/23/Spring-Boot-%E6%91%B8%E7%B4%A2%E4%B9%8B%E8%B7%AF-1%EF%BC%9A%E8%BF%9E%E6%8E%A5MySql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<blockquote>
<p>关于Spring_Boot框架下如何连接MySql数据库的学习过程</p>
</blockquote>
<a id="more"></a>

<p>[toc]</p>
<h1 id="Spring-Boot-三大特性之：开箱即用"><a href="#Spring-Boot-三大特性之：开箱即用" class="headerlink" title="Spring-Boot 三大特性之：开箱即用"></a>Spring-Boot 三大特性之：开箱即用</h1><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><ul>
<li><p><strong>在以前如何连接数据库？</strong></p>
<ul>
<li><p>首先在本地或服务器上建立数据库</p>
</li>
<li><p>进入<strong>IDEA</strong>，如果使用<code>hibernate</code>连接的话导入<strong>hibernate</strong>的jar包，导入<strong>ehcache</strong>的jar包和<strong>logj4</strong>的jar包。</p>
</li>
<li><p>新建<code>hibernate.conf.xml</code></p>
</li>
<li><p>配置一大堆数据库地址，用户名密码之类的标签</p>
</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-configuration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">	<span class="meta-string">"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span></span><br><span class="line"><span class="meta">	<span class="meta-string">"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Hibernate配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--配置连接目标数据库的基本信息 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.driver_class"</span>&gt;</span></span><br><span class="line">			com.mysql.cj.jdbc.Driver</span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.url"</span>&gt;</span></span><br><span class="line">			jdbc:mysql://Ip:Port/DatabaseName?serverTimezone=TimeZone</span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 配置c3p0连接池 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 初始化连接数量 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.max_size"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 最小连接数量 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.min_size"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 连接池中最大允许多少个语句对象 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.max_statements"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 空闲连接检测间隔 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.idle_test_period"</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 最长等待时间,超时时间 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.timeout"</span>&gt;</span>5000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 连接池扩容步长 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.acquire_increment"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 开启二级缓存 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cache.use_second_level_cache"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 指定缓存供应商 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cache.region.factory_class"</span>&gt;</span></span><br><span class="line">			org.hibernate.cache.ehcache.EhCacheRegionFactory</span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 开启查询缓存 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cache.use_query_cache"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库方言 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span>&gt;</span></span><br><span class="line">			org.hibernate.dialect.MySQLDialect</span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 显示SQL语句 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 格式化SQL语句 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 开启自动生成DDL语句 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 批处理 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.jdbc.batch_size"</span>&gt;</span>50<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 映射目标实体类 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"packageName.EntityClass"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<ul>
<li><p>现在有了SpringBoot如何连接数据库？</p>
<ul>
<li><p>首先在本地或服务器上建立数据库</p>
</li>
<li><p>进入<strong>IDEA</strong>，创建一个基于<code>maven</code>的<strong>Spring-Boot</strong>项目</p>
</li>
<li><p>在<code>pom.xml</code>中导入一下依赖</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       Persit data in SQL stores with Java Persistence API </span></span><br><span class="line"><span class="comment">       using Spring Data and Hibernate</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	MySql JDBC and R2DBC driver</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在配置文件中输入数据库地址，用户名和密码就好了</p>
</li>
</ul>
<ul>
<li><p><code>application.properties</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PROPERTIES"><figure class="iseeu highlight /properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据源 配置 (DataSourceAutoConfiguration &amp; DataSourceProperties)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span> = <span class="string">#JDBC驱动程序的完全限定名称。默认情况下，根据URL自动检测</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.datasource.name</span> =  <span class="string">#数据源的名称</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.datasource.password</span> = <span class="string">#登录数据库的密码</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.datasource.url</span> = <span class="string">#数据库的JDBC url</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>application.yml</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YAML"><figure class="iseeu highlight /yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#数据库的JDBC url</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://Ip:Port/DatabaseName?serverTimezone=TimeZone</span></span><br><span class="line">    <span class="comment">#JDBC驱动程序的完全限定名称。默认情况下，根据URL自动检测</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="comment">#数据源的名称</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="comment">#登录数据库的密码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure></div>








</li>
</ul>
</li>
</ul>
<h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.annotations.*;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.annotations.Cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**商品实体类*/</span></span><br><span class="line"><span class="comment">//lombok自动产生get&amp;set方法,构造方法等方法</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="comment">//表示该类是一个实体类,对应一张数据库的表</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"item_demo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = id)</span><br><span class="line">    <span class="keyword">private</span> Long id;<span class="comment">//商品编号,对应数据库的id</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(name = picture)</span><br><span class="line">    <span class="keyword">private</span> String picture;<span class="comment">//商品图片路径,对应数据库</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(name = name)</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//商品名称,对应数据库</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(name = price)</span><br><span class="line">    <span class="keyword">private</span> Double price;<span class="comment">//商品价格,对应数据库</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



]]></content>
      <tags>
        <tag>Spring-Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Boot 摸索之路-0</title>
    <url>/2020/01/22/Spring-Boot-%E6%91%B8%E7%B4%A2%E4%B9%8B%E8%B7%AF-0/</url>
    <content><![CDATA[<blockquote>
<p>对Spring-Boot 学习过程的复现，记录中间遇到的Bug。</p>
</blockquote>
<a id="more"></a>

<p>[toc]</p>
<h1 id="Spring-Boot-如何开始"><a href="#Spring-Boot-如何开始" class="headerlink" title="Spring_Boot 如何开始"></a>Spring_Boot 如何开始</h1><h2 id="1、Spring-Boot"><a href="#1、Spring-Boot" class="headerlink" title="1、Spring-Boot"></a>1、Spring-Boot</h2><p> Spring_Boot是一个简化Spring应用开发的框架；</p>
<p> Spring_Boot是整个Spring技术栈的大整合；</p>
<p> Spring_Boot是J2EE开发的一站式解决方案；</p>
<h2 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h2><p> 2014，martin fowler</p>
<p> 微服务：架构风格（服务微化）</p>
<p> 一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；</p>
<p> 单体应用：ALL IN ONE</p>
<p> 微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；</p>
<h2 id="3、环境准备"><a href="#3、环境准备" class="headerlink" title="3、环境准备"></a>3、环境准备</h2><p>  –<strong>jdk1.8</strong>：java version <code>1.8.0_112</code>; Spring Boot 推荐jdk1.8及以上；</p>
<p>  –<strong>Apache Maven</strong> <code>3.6.3;</code></p>
<p>  –*<em>IntelliJ IDEA *</em><code>2019.3 </code>;</p>
<p>  –<strong>Spring_Boot</strong> <code>2.2.3.RELEASE</code>;</p>
<h3 id="Maven-配置"><a href="#Maven-配置" class="headerlink" title="Maven 配置"></a>Maven 配置</h3><p> <a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">下载maven</a></p>
<p>进入maven<code>ClassPath/conf/setting.xml</code></p>
<p>给<code>profiles</code>添加一下配置</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h3 id="IDE配置"><a href="#IDE配置" class="headerlink" title="IDE配置"></a>IDE配置</h3><h2 id="4、-创建第一个Maven工程"><a href="#4、-创建第一个Maven工程" class="headerlink" title="4、 创建第一个Maven工程"></a>4、 创建第一个Maven工程</h2><p>功能： </p>
<ul>
<li>给浏览器发送hello请求，服务器接受请求并处理，响应Hello World 字符串；</li>
</ul>
<ol>
<li><p>创建一个maven工程；</p>
</li>
<li><p>在<code>pom.xml</code>中导入想换的依赖</p>
</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>编写一个主程序</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>如果已经自动生成了主程序，可以直接夹如<code>@SpringBootApplication</code>注释来说明这是一个Spring Boot应用。</p>
<ol start="4">
<li>编写Conroller</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*加入Controller注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="5">
<li>运行主程序测试</li>
</ol>
<p>运行一开始写的<code>HelloWorldMainApplication.java</code></p>
<p>在浏览器输入<code>localhost:8080/hello</code>看看浏览器是不是返还了String:<code>HelloWorld!</code></p>
<ol start="6">
<li>简化部署</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>将这个应用打成jar包，直接使用java -jar的命令进行执行；</p>
<h2 id="5、Hello-World探究"><a href="#5、Hello-World探究" class="headerlink" title="5、Hello World探究"></a>5、Hello World探究</h2><h3 id="1、POM文件"><a href="#1、POM文件" class="headerlink" title="1、POM文件"></a>1、POM文件</h3><ol>
<li>父项目(parent)</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--他的父项目是--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--他来真正管理Spring Boot应用里面的所有依赖版本；--&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>Spring Boot的版本仲裁中心；</p>
<p>以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p>
<ol start="2">
<li>启动器(spring-boot-starter)</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>spring-boot-starter</strong>-==web==：</p>
<p>​    spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；</p>
<p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</p>
<h3 id="2、主程序类，主入口类"><a href="#2、主程序类，主入口类" class="headerlink" title="2、主程序类，主入口类"></a>2、主程序类，主入口类</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>@SpringBootApplication:    Spring Boot应用标注在某个类上说明这个类是Spring-Boot的主配置类，Spring-Boot就应该运行这个类的main方法来启动Spring-Boot应用；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line">      <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">      @<span class="title">Filter</span>(<span class="title">type</span> </span>= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>) &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br></pre></td></tr></table></figure></div>

<p>@<strong>SpringBootConfiguration</strong>: Spring-Boot的配置类；</p>
<p>标注在某个类上，表示这是一个Spring Boot的配置类；</p>
<p>@<strong>Configuration</strong>: 标注在某个类上，标志这是一个配置类；</p>
<p>配置类 —-  配置文件；配置类也是容器中的一个组件；@Component</p>
<p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</p>
<p>以前我们需要配置的东西，Spring Boot帮我们自动配置；</p>
<p>@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能；这样自动配置才能生效；</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(EnableAutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure></div>

<p>@<strong>AutoConfigurationPackage</strong>：自动配置包</p>
<p>@<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</p>
<p>Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</p>
<p>将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器</p>
<p>@<strong>Import</strong>(EnableAutoConfigurationImportSelector.class)；</p>
<p>给容器中导入组件？</p>
<p><strong>EnableAutoConfigurationImportSelector</strong>：导入哪些组件的选择器；</p>
<p>将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p>
<p>会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；    </p>
<p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</p>
<p><code>SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)</code>;</p>
<p><strong>Spring-Boot</strong>在启动的时候从类路径下的<code>META-INF/spring.factories</code>中获取<strong>EnableAutoConfiguration</strong>指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；</p>
<p>以前我们需要自己配置的东西，自动配置类都帮我们；</p>
<p>J2EE的整体整合解决方案和自动配置都在<code>spring-boot-autoconfigure-1.5.9.RELEASE.jar</code>；</p>
<h2 id="6、使用Spring-Initializer快速创建Spring-Boot项目"><a href="#6、使用Spring-Initializer快速创建Spring-Boot项目" class="headerlink" title="6、使用Spring Initializer快速创建Spring-Boot项目"></a>6、使用<strong>Spring Initializer</strong>快速创建<strong>Spring-Boot</strong>项目</h2><ul>
<li><p>IDEA：使用** <strong>Spring Initializer</strong>快速创建项目</p>
<p>​    <strong>IDE</strong>都支持使用Spring的项目创建向导快速创建一个<strong>Spring-Boot</strong>项目；</p>
<p>​    选择我们需要的模块；向导会联网创建<strong>Spring-Boot</strong>项目；</p>
<p>​    默认生成的<strong>Spring-Boot</strong>项目；</p>
</li>
<li><p>主程序已经生成好了，我们只需要我们自己的逻辑</p>
</li>
<li><p><strong>resources</strong>文件夹中目录结构</p>
<ul>
<li><strong>static</strong>：保存所有的静态资源:  <code>js</code>、<code>css</code>、<code>images</code>；</li>
<li><strong>templates</strong>：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（<code>freemarker</code>、<code>thymeleaf</code>）；</li>
<li><strong>application.properties</strong>：Spring Boot应用的配置文件；可以修改一些默认设置；</li>
</ul>
</li>
</ul>
<hr>
<p>Reference<br><a href="https://github.com/Allwayz" target="_blank" rel="noopener">Allwayz</a></p>
]]></content>
      <tags>
        <tag>Spring-Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Tools Classes</title>
    <url>/2020/01/12/Java-Tools-Classes/</url>
    <content><![CDATA[<blockquote>
<p>封装了一些常用Java操作方法,便于重复开发利用.</p>
</blockquote>
<a id="more"></a>

<p>[toc]</p>
<h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><p>Win10x64<br>JDK1.8<br>Intellij IDEA 2019.3.1</p>
<h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">│  README.md</span><br><span class="line">│</span><br><span class="line">└─src</span><br><span class="line">    └─evilp0s</span><br><span class="line">        │  [CharsetUtil.java](https:<span class="comment">//github.com/Allwayz/JavaToolClasses/blob/master/src/main/java/com/opslab/util/CharsetUtil.java)     //字符串相关的工具类</span></span><br><span class="line">        │  ClassUtil.java       <span class="comment">//Java Class与反射相关的一些工具类</span></span><br><span class="line">        │  ChinesUtil.java      <span class="comment">//中文相关的工具类</span></span><br><span class="line">        │  ConvertUtil.java     <span class="comment">//转换相关的工具类</span></span><br><span class="line">        │  DateUtil.java        <span class="comment">//日期时间相关的工具类</span></span><br><span class="line">        │  EmailUtil.java       <span class="comment">//Email相关的工具类</span></span><br><span class="line">        │  FilePathUtil.java    <span class="comment">//文件路径相关的工具类</span></span><br><span class="line">        │  FileUtil.java        <span class="comment">//文件相关的工具类</span></span><br><span class="line">        │  PrintUtil.java       <span class="comment">//打印相关的工具类</span></span><br><span class="line">        │  ProUtil.java         <span class="comment">//属性文件相关的工具类</span></span><br><span class="line">        │  RandomUtil.java      <span class="comment">//随机操作的相关的工具类</span></span><br><span class="line">        │  RegUtil.java         <span class="comment">//正则相关的工具类</span></span><br><span class="line">        │  SecUtil.java         <span class="comment">//安全相关的工具类</span></span><br><span class="line">        │  StreamUtil.java      <span class="comment">//Stream相关的工具类</span></span><br><span class="line">        │  StringUtil.java      <span class="comment">//字符串相关的工具类</span></span><br><span class="line">        │  SysUtil.java         <span class="comment">//系统相关的工具类</span></span><br><span class="line">        │  ValidUtil.java       <span class="comment">//字符串相关的工具类</span></span><br><span class="line">        │  WebUtil.java         <span class="comment">//Web相关的工具类</span></span><br><span class="line">        │  ZIPUtil.java         <span class="comment">//zip相关的工具类</span></span><br><span class="line">        │</span><br><span class="line">        ├─algorithmImpl <span class="comment">//一些算法的实现细节</span></span><br><span class="line">        │      cpDetector.java</span><br><span class="line">        │      FileEncodingUtil.java</span><br><span class="line">        │      FileImpl.java</span><br><span class="line">        │      FileReadImpl.java</span><br><span class="line">        │      FileTypeImpl.java</span><br><span class="line">        │      StringImpl.java</span><br><span class="line">        │</span><br><span class="line">        └─FTP <span class="comment">//FTP相关操作的封装</span></span><br><span class="line">                FileAttr.java</span><br><span class="line">                FTPConstant.java</span><br><span class="line">                FTPFactory.java</span><br><span class="line">                FTPLog.java</span><br><span class="line">                FTPtest.java</span><br><span class="line">                FTPUtil.java</span><br><span class="line">                FTPUtilImpl.java</span><br><span class="line">                FTPVo.java</span><br><span class="line">                FunctionSet.java</span><br></pre></td></tr></table></figure></div>



<h1 id="APIDOC"><a href="#APIDOC" class="headerlink" title="APIDOC"></a>APIDOC</h1><h1 id="CharsetUtil字符串相关的工具类"><a href="#CharsetUtil字符串相关的工具类" class="headerlink" title="CharsetUtil字符串相关的工具类"></a>CharsetUtil字符串相关的工具类</h1><h2 id="常量字段"><a href="#常量字段" class="headerlink" title="常量字段"></a>常量字段</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> java.lang.String    GBK             <span class="comment">//中文超大字符集</span></span><br><span class="line"><span class="keyword">static</span> java.lang.String    ISO_8859_1      <span class="comment">//ISO 拉丁字母表 No.1，也叫作 ISO-LATIN-1</span></span><br><span class="line"><span class="keyword">static</span> java.lang.String    US_ASCII        <span class="comment">//7位ASCII字符，也叫作ISO646-US、Unicode字符集的基本拉丁块</span></span><br><span class="line"><span class="keyword">static</span> java.lang.String    UTF_16          <span class="comment">//16 位 UCS 转换格式，字节顺序由可选的字节顺序标记来标识</span></span><br><span class="line"><span class="keyword">static</span> java.lang.String    UTF_16BE        <span class="comment">//16 位 UCS 转换格式，Big Endian（最低地址存放高位字节）字节顺序</span></span><br><span class="line"><span class="keyword">static</span> java.lang.String    UTF_16LE        <span class="comment">//16 位 UCS 转换格式，Little-endian（最高地址存放低位字节）字节顺序</span></span><br><span class="line"><span class="keyword">static</span> java.lang.String    UTF_8           <span class="comment">//8 位 UCS 转换格式</span></span><br></pre></td></tr></table></figure></div>

<h2 id="常量方法"><a href="#常量方法" class="headerlink" title="常量方法"></a>常量方法</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> java.lang.<span class="function">String    <span class="title">changeCharset</span><span class="params">(java.lang.String str, java.lang.String newCharset)</span></span></span><br><span class="line"><span class="function"><span class="comment">//字符串编码转换的实现方法</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">changeCharset</span><span class="params">(java.lang.String str, java.lang.String oldCharset, java.lang.String newCharset)</span></span></span><br><span class="line"><span class="function"><span class="comment">//字符串编码转换的实现方法</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">toASCII</span><span class="params">(java.lang.String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">//将字符编码转换成US-ASCII码</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">toGBK</span><span class="params">(java.lang.String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">//将字符编码转换成GBK码</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">toISO_8859_1</span><span class="params">(java.lang.String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">//将字符编码转换成ISO-8859-1码</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">toUTF_16</span><span class="params">(java.lang.String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">//将字符编码转换成UTF-16码</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">toUTF_16BE</span><span class="params">(java.lang.String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">//将字符编码转换成UTF-16BE码</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">toUTF_16LE</span><span class="params">(java.lang.String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">//将字符编码转换成UTF-16LE码</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">toUTF_8</span><span class="params">(java.lang.String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">//将字符编码转换成UTF-8码</span></span></span><br></pre></td></tr></table></figure></div>


<h1 id="ClassUtil-Class与反射相关的一些工具类"><a href="#ClassUtil-Class与反射相关的一些工具类" class="headerlink" title="ClassUtil-Class与反射相关的一些工具类"></a>ClassUtil-Class与反射相关的一些工具类</h1><h2 id="常量方法-1"><a href="#常量方法-1" class="headerlink" title="常量方法"></a>常量方法</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> java.util.List&lt;java.lang.String&gt;    getClassName(java.lang.String packageName, <span class="keyword">boolean</span> childPackage)</span><br><span class="line"><span class="keyword">static</span> java.lang.String[]  getField(java.lang.String className)</span><br><span class="line"><span class="comment">//获取指定类的全部属性字段</span></span><br><span class="line"><span class="keyword">static</span> java.lang.String[]  getMethod(java.lang.String className)</span><br><span class="line"><span class="comment">//获取对象的全部方法</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>    <span class="title">getter</span><span class="params">(java.lang.Object obj, java.lang.String att)</span></span></span><br><span class="line"><span class="function">调用对象的getter方法</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">initStr</span><span class="params">(java.lang.String old)</span></span></span><br><span class="line"><span class="function">java.lang.Class    <span class="title">loadClass</span><span class="params">(java.lang.String className)</span></span></span><br><span class="line"><span class="function"><span class="comment">//加载指定的类</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> &lt;T&gt; T   <span class="title">propertiesCopy</span><span class="params">(java.lang.Object obj, java.lang.Class&lt;T&gt; type)</span></span></span><br><span class="line"><span class="function"><span class="comment">//同名属性值复制 将对象obj内属性名同类型T内容有同名属性的值复制到类型T中，并返回一个类型T的对象</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> &lt;T&gt; T   <span class="title">propertiesCopyIgnore</span><span class="params">(java.lang.Object obj, java.lang.Class&lt;T&gt; type)</span></span></span><br><span class="line"><span class="function"><span class="comment">//同名属性值复制（忽略大小写） 将对象obj内属性名同类型T内容有同名属性的值复制到类型T中，并返回一个类型T的对象</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> &lt;T&gt; T   <span class="title">propertiesCopyIgnoreFilter</span><span class="params">(java.lang.Object obj, java.lang.Class&lt;T&gt; type, java.lang.String IgnoreStr)</span></span></span><br><span class="line"><span class="function"><span class="comment">//同名属性值复制（比较时忽略字符IgnoreStr的内容） 将对象obj内属性名同类型T内容有同名属性的值复制到类型T中，并返回一个类型T的对象</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>    <span class="title">setter</span><span class="params">(java.lang.Object obj, java.lang.String att, java.lang.Object value, java.lang.Class&lt;?&gt; type)</span></span></span><br><span class="line"><span class="function"><span class="comment">//调用对象的setter方法</span></span></span><br></pre></td></tr></table></figure></div>


<h1 id="ChinesUtil中文相关的工具类"><a href="#ChinesUtil中文相关的工具类" class="headerlink" title="ChinesUtil中文相关的工具类"></a>ChinesUtil中文相关的工具类</h1><h2 id="常量方法-2"><a href="#常量方法-2" class="headerlink" title="常量方法"></a>常量方法</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> java.lang.<span class="function">String    <span class="title">getFirstSpell</span><span class="params">(java.lang.String chinese)</span></span></span><br><span class="line"><span class="function">获取汉字串拼音首字母，英文字符不变</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">getFullSpell</span><span class="params">(java.lang.String chinese)</span></span></span><br><span class="line"><span class="function">获取汉字串拼音，英文字符不变</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">getPingYin</span><span class="params">(java.lang.String inputString)</span></span></span><br><span class="line"><span class="function">将字符串中的中文转化为拼音,其他字符不变</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isChinese</span><span class="params">(java.lang.String strName)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isChineseByName</span><span class="params">(java.lang.String str)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isChineseByREG</span><span class="params">(java.lang.String str)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>    <span class="title">main</span><span class="params">(java.lang.String[] args)</span></span></span><br></pre></td></tr></table></figure></div>


<h1 id="ConvertUtil转换相关的工具类"><a href="#ConvertUtil转换相关的工具类" class="headerlink" title="ConvertUtil转换相关的工具类"></a>ConvertUtil转换相关的工具类</h1><h2 id="常量方法-3"><a href="#常量方法-3" class="headerlink" title="常量方法"></a>常量方法</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bytesToInt</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span>    <span class="title">byteToLong</span><span class="params">(<span class="keyword">byte</span>[] b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">short</span>   <span class="title">byteToShort</span><span class="params">(<span class="keyword">byte</span>[] b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">byte</span>[]  <span class="title">intToByte</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">byte</span>[]  <span class="title">longToByte</span><span class="params">(<span class="keyword">long</span> number)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">byte</span>[]  <span class="title">shortToByte</span><span class="params">(<span class="keyword">short</span> number)</span></span></span><br></pre></td></tr></table></figure></div>


<h1 id="DateUtil日期时间相关的工具类"><a href="#DateUtil日期时间相关的工具类" class="headerlink" title="DateUtil日期时间相关的工具类"></a>DateUtil日期时间相关的工具类</h1><h2 id="常量方法-4"><a href="#常量方法-4" class="headerlink" title="常量方法"></a>常量方法</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> java.util.<span class="function">Date  <span class="title">calculate</span><span class="params">(java.util.Date date, <span class="keyword">int</span> second, java.lang.String timeBurst)</span></span></span><br><span class="line"><span class="function"><span class="comment">//时间Date在时间段(例如每天的08:00-18:00)上增加或减去second秒</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.Date  <span class="title">calculate</span><span class="params">(java.lang.String date, <span class="keyword">int</span> second, java.lang.String timeBurst)</span><span class="comment">//</span></span></span><br><span class="line"><span class="function">时间Date在时间段<span class="params">(例如每天的<span class="number">08</span>:<span class="number">00</span><span class="number">-18</span>:<span class="number">00</span>)</span>上增加或减去second秒</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">Date</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取当前的日期</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">Date</span><span class="params">(java.util.Date date)</span></span></span><br><span class="line"><span class="function"><span class="comment">//将指定的时间格式化成出返回</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.Date  <span class="title">Date</span><span class="params">(java.lang.String dateStr)</span></span></span><br><span class="line"><span class="function"><span class="comment">//将指定的字符串解析为时间类型</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">DateTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取当前日期时间</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">DateTime</span><span class="params">(java.util.Date date)</span></span></span><br><span class="line"><span class="function"><span class="comment">//将指定的时间格式化成出返回</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.Date  <span class="title">DateTime</span><span class="params">(java.lang.String datestr)</span></span></span><br><span class="line"><span class="function"><span class="comment">//将指定的字符串解析为时间类型</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.Date  <span class="title">day</span><span class="params">(java.util.Date date, <span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function"><span class="comment">//在指定的时间上加或减去几天</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.Date  <span class="title">day</span><span class="params">(<span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function"><span class="comment">//在当前时间的基础上加或减去几天</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.Date  <span class="title">hour</span><span class="params">(java.util.Date date, <span class="keyword">float</span> hour)</span></span></span><br><span class="line"><span class="function"><span class="comment">//在制定的时间上加或减去几小时-支持浮点数</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.Date  <span class="title">hour</span><span class="params">(<span class="keyword">float</span> hour)</span></span></span><br><span class="line"><span class="function"><span class="comment">//在当前时间的基础上加或减去几小时-支持浮点数</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isDate</span><span class="params">(java.lang.String date)</span></span></span><br><span class="line"><span class="function"><span class="comment">//判断字符串是否为日期字符串</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.Date  <span class="title">Minute</span><span class="params">(java.util.Date date, <span class="keyword">int</span> minute)</span></span></span><br><span class="line"><span class="function"><span class="comment">//在制定的时间上加或减去几分钟</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.Date  <span class="title">Minute</span><span class="params">(<span class="keyword">int</span> minute)</span></span></span><br><span class="line"><span class="function"><span class="comment">//在当前时间的基础上加或减去几分钟</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.Date  <span class="title">month</span><span class="params">(java.util.Date date, <span class="keyword">int</span> month)</span></span></span><br><span class="line"><span class="function"><span class="comment">//在指定的时间上加或减去几月</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.Date  <span class="title">month</span><span class="params">(<span class="keyword">int</span> month)</span></span></span><br><span class="line"><span class="function"><span class="comment">//在当前时间的基础上加或减去几月</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">subDay</span><span class="params">(java.util.Date startTime, java.util.Date endTime)</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取俩个时间之前的相隔的天数</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">subDay</span><span class="params">(java.lang.String startTime, java.lang.String endTime)</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取俩个时间之前的相隔的天数</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span>    <span class="title">subtimeBurst</span><span class="params">(java.util.Date startDate, java.util.Date endDate, java.lang.String timeBurst)</span></span></span><br><span class="line"><span class="function"><span class="comment">//返回俩个时间在时间段(例如每天的08:00-18:00)的时长-单位秒</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span>    <span class="title">subtimeBurst</span><span class="params">(java.lang.String startDate, java.lang.String endDate, java.lang.String timeBurst)</span></span></span><br><span class="line"><span class="function"><span class="comment">//返回俩个时间在时间段(例如每天的08:00-18:00)的时长-单位秒</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span>    <span class="title">Subtract</span><span class="params">(java.util.Date date1, java.util.Date date2)</span></span></span><br><span class="line"><span class="function"><span class="comment">//时间date1和date2的时间差-单位秒</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span>    <span class="title">Subtract</span><span class="params">(java.lang.String date1, java.lang.String date2)</span></span></span><br><span class="line"><span class="function"><span class="comment">//时间date1和date2的时间差-单位秒</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">SubtractDate</span><span class="params">(java.lang.String date1, java.lang.String date2)</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取俩个时间的查结果用时秒表示</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">SubtractDay</span><span class="params">(java.util.Date date1, java.util.Date date2)</span></span></span><br><span class="line"><span class="function"><span class="comment">//时间date1和date2的时间差-单位天</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">SubtractDay</span><span class="params">(java.lang.String date1, java.lang.String date2)</span></span></span><br><span class="line"><span class="function"><span class="comment">//时间date1和date2的时间差-单位天</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">SubtractHour</span><span class="params">(java.util.Date date1, java.util.Date date2)</span></span></span><br><span class="line"><span class="function"><span class="comment">//时间date1和date2的时间差-单位小时</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">SubtractHour</span><span class="params">(java.lang.String date1, java.lang.String date2)</span></span></span><br><span class="line"><span class="function"><span class="comment">//时间date1和date2的时间差-单位小时</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">SubtractMinute</span><span class="params">(java.util.Date date1, java.util.Date date2)</span></span></span><br><span class="line"><span class="function"><span class="comment">//时间date1和date2的时间差-单位分钟</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">SubtractMinute</span><span class="params">(java.lang.String date1, java.lang.String date2)</span></span></span><br><span class="line"><span class="function"><span class="comment">//时间date1和date2的时间差 -单位分钟</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">SubtractMonth</span><span class="params">(java.util.Date date1, java.util.Date date2)</span></span></span><br><span class="line"><span class="function"><span class="comment">//时间date1和date2的时间差-单位月</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">SubtractMonth</span><span class="params">(java.lang.String date1, java.lang.String date2)</span></span></span><br><span class="line"><span class="function"><span class="comment">//时间date1和date2的时间差-单位月</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">SubtractTime</span><span class="params">(java.lang.String date1, java.lang.String date2)</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取俩个时间的查结果用时秒表示</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">SubtractYear</span><span class="params">(java.util.Date date1, java.util.Date date2)</span></span></span><br><span class="line"><span class="function"><span class="comment">//时间date1和date2的时间差-单位年</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">SubtractYear</span><span class="params">(java.lang.String date1, java.lang.String date2)</span></span></span><br><span class="line"><span class="function"><span class="comment">//时间date1和date2的时间差-单位年</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">Time</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取当前的时间</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">Time</span><span class="params">(java.util.Date date)</span></span></span><br><span class="line"><span class="function"><span class="comment">//讲指定的时间格式化成出返回</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.Date  <span class="title">Time</span><span class="params">(java.lang.String dateStr)</span></span></span><br><span class="line"><span class="function"><span class="comment">//将指定的字符串解析为时间类型</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.Date  <span class="title">year</span><span class="params">(java.util.Date date, <span class="keyword">int</span> year)</span></span></span><br><span class="line"><span class="function"><span class="comment">//在指定的时间上加或减去几年</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.Date  <span class="title">year</span><span class="params">(<span class="keyword">int</span> year)</span></span></span><br><span class="line"><span class="function"><span class="comment">//在当前时间的基础上加或减去year年</span></span></span><br></pre></td></tr></table></figure></div>


<h1 id="EmailUtilEmail相关的工具类"><a href="#EmailUtilEmail相关的工具类" class="headerlink" title="EmailUtilEmail相关的工具类"></a>EmailUtilEmail相关的工具类</h1><h2 id="常量方法-5"><a href="#常量方法-5" class="headerlink" title="常量方法"></a>常量方法</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>   <span class="title">doSendHtmlEmail</span><span class="params">(java.lang.String subject, java.lang.String sendHtml, java.lang.String receiveUser)</span></span></span><br><span class="line"><span class="function"><span class="comment">//发送邮件</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>   <span class="title">doSendHtmlEmail</span><span class="params">(java.lang.String subject, java.lang.String sendHtml, java.lang.String receiveUser, java.io.File attachment)</span></span></span><br><span class="line"><span class="function"><span class="comment">//发送邮件</span></span></span><br></pre></td></tr></table></figure></div>


<h1 id="FilePathUtil文件路径相关的工具类"><a href="#FilePathUtil文件路径相关的工具类" class="headerlink" title="FilePathUtil文件路径相关的工具类"></a>FilePathUtil文件路径相关的工具类</h1><h2 id="常量方法-6"><a href="#常量方法-6" class="headerlink" title="常量方法"></a>常量方法</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> java.lang.<span class="function">String    <span class="title">commandPath</span><span class="params">(java.lang.String file)</span></span></span><br><span class="line"><span class="function"><span class="comment">//返回一个通用的文件路径</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">getParentPath</span><span class="params">(java.lang.String file)</span></span></span><br><span class="line"><span class="function"><span class="comment">//返回相一个目录的对于本身的相对父目录</span></span></span><br></pre></td></tr></table></figure></div>

<h1 id="FileUtil文件相关的工具类"><a href="#FileUtil文件相关的工具类" class="headerlink" title="FileUtil文件相关的工具类"></a>FileUtil文件相关的工具类</h1><h2 id="常量方法-7"><a href="#常量方法-7" class="headerlink" title="常量方法"></a>常量方法</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">appendLine</span><span class="params">(java.io.File file, java.lang.String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">//在文件末尾追加一行</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">cleanFile</span><span class="params">(java.io.File file)</span></span></span><br><span class="line"><span class="function"><span class="comment">//快速清空一个超大的文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">copy</span><span class="params">(java.io.File file, java.lang.String targetFile)</span></span></span><br><span class="line"><span class="function"><span class="comment">//复制文件 通过该方式复制文件文件越大速度越是明显</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">copy</span><span class="params">(java.lang.String resourcePath, java.lang.String targetPath)</span></span></span><br><span class="line"><span class="function"><span class="comment">//复制文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>    <span class="title">copyDir</span><span class="params">(java.io.File filePath, java.lang.String targetPath)</span></span></span><br><span class="line"><span class="function"><span class="comment">//复制目录</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>    <span class="title">copyDir</span><span class="params">(java.lang.String filePath, java.lang.String targetPath)</span></span></span><br><span class="line"><span class="function"><span class="comment">//复制目录</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countLines</span><span class="params">(java.io.File file)</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取文件的行数</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">cpdetector</span><span class="params">(java.io.File file)</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取文件的编码(cpDetector)探测</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">createFiles</span><span class="params">(java.lang.String filePaht)</span></span></span><br><span class="line"><span class="function"><span class="comment">//创建文件支持多级目录</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>    <span class="title">createPaths</span><span class="params">(java.lang.String paths)</span></span></span><br><span class="line"><span class="function"><span class="comment">//创建多级目录</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteBigFile</span><span class="params">(java.io.File file)</span></span></span><br><span class="line"><span class="function"><span class="comment">//快速的删除超大的文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteDir</span><span class="params">(java.io.File file)</span></span></span><br><span class="line"><span class="function"><span class="comment">//删除一个目录</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteFile</span><span class="params">(java.io.File file)</span></span></span><br><span class="line"><span class="function"><span class="comment">//删除一个文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">FileType</span><span class="params">(java.io.File file)</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取文件的类型</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">hash</span><span class="params">(java.io.File file)</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取文件的Hash</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.List&lt;java.lang.String&gt;    <span class="title">Lines</span><span class="params">(java.io.File file)</span></span></span><br><span class="line"><span class="function"><span class="comment">//以列表的方式获取文件的所有行</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.List&lt;java.lang.String&gt;    <span class="title">Lines</span><span class="params">(java.io.File file, <span class="keyword">int</span> lines)</span></span></span><br><span class="line"><span class="function"><span class="comment">//以列表的方式获取文件的指定的行数数据</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.List&lt;java.io.File&gt;    <span class="title">listFile</span><span class="params">(java.io.File path)</span></span></span><br><span class="line"><span class="function"><span class="comment">//罗列指定路径下的全部文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.List&lt;java.io.File&gt;    <span class="title">listFile</span><span class="params">(java.lang.String path)</span></span></span><br><span class="line"><span class="function"><span class="comment">//罗列指定路径下的全部文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.List&lt;java.io.File&gt;    <span class="title">listFileAll</span><span class="params">(java.io.File path)</span></span></span><br><span class="line"><span class="function"><span class="comment">//罗列指定路径下的全部文件包括文件夹</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.List&lt;java.io.File&gt;    <span class="title">listFileFilter</span><span class="params">(java.io.File dirPath, java.lang.String postfixs)</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取指定目录下的特点文件,通过后缀名过滤</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">MimeType</span><span class="params">(java.lang.String file)</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取文件的Mime类型</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.Date  <span class="title">modifyTime</span><span class="params">(java.io.File file)</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取文件最后的修改时间</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.List&lt;java.io.File&gt;    <span class="title">searchFile</span><span class="params">(java.io.File dirPath, java.lang.String fileName)</span></span></span><br><span class="line"><span class="function"><span class="comment">//在指定的目录下搜寻文个文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.List&lt;java.io.File&gt;    <span class="title">searchFileReg</span><span class="params">(java.io.File dirPath, java.lang.String reg)</span></span></span><br><span class="line"><span class="function"><span class="comment">//查找符合正则表达式reg的的文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">SimpleEncoding</span><span class="params">(java.lang.String file)</span></span></span><br><span class="line"><span class="function"><span class="comment">//利用简单的文件头字节特征探测文件编码</span></span></span><br></pre></td></tr></table></figure></div>


<h1 id="PrintUtil打印相关的工具类"><a href="#PrintUtil打印相关的工具类" class="headerlink" title="PrintUtil打印相关的工具类"></a>PrintUtil打印相关的工具类</h1><h2 id="常量方法-8"><a href="#常量方法-8" class="headerlink" title="常量方法"></a>常量方法</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>    <span class="title">print</span><span class="params">(java.util.Enumeration enums)</span></span></span><br><span class="line"><span class="function"><span class="comment">//遍历打印Enumeration</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>    <span class="title">print</span><span class="params">(java.util.List&lt;?&gt; list)</span></span></span><br><span class="line"><span class="function"><span class="comment">//遍历打印遍历List集合</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>    <span class="title">print</span><span class="params">(java.util.Map map)</span></span></span><br><span class="line"><span class="function"><span class="comment">//遍历打印Map集合</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>    <span class="title">print</span><span class="params">(java.lang.String str)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>    <span class="title">println</span><span class="params">(java.lang.Object obj)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>    <span class="title">println</span><span class="params">(java.lang.String str)</span></span></span><br></pre></td></tr></table></figure></div>


<h1 id="ProUtil属性文件相关的工具类"><a href="#ProUtil属性文件相关的工具类" class="headerlink" title="ProUtil属性文件相关的工具类"></a>ProUtil属性文件相关的工具类</h1><h2 id="常量方法-9"><a href="#常量方法-9" class="headerlink" title="常量方法"></a>常量方法</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> java.lang.<span class="function">String    <span class="title">GetAllProperties</span><span class="params">(java.lang.String filePath)</span></span></span><br><span class="line"><span class="function"><span class="comment">//读取Properties的全部信息</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">GetValueByKey</span><span class="params">(java.lang.String filePath, java.lang.String key)</span></span></span><br><span class="line"><span class="function"><span class="comment">//根据Key读取Value</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">key</span><span class="params">(java.lang.String key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>    <span class="title">WriteProperties</span><span class="params">(java.lang.String filePath, java.lang.String pKey, java.lang.String pValue)</span></span></span><br><span class="line"><span class="function"><span class="comment">//写入Properties信息</span></span></span><br></pre></td></tr></table></figure></div>


<h1 id="RandomUtil随机操作的相关的工具类"><a href="#RandomUtil随机操作的相关的工具类" class="headerlink" title="RandomUtil随机操作的相关的工具类"></a>RandomUtil随机操作的相关的工具类</h1><h2 id="常量方法-10"><a href="#常量方法-10" class="headerlink" title="常量方法"></a>常量方法</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNotSimple</span><span class="params">(<span class="keyword">int</span>[] param, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"><span class="comment">//每次生成的len位数都不相同</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">LowerString</span><span class="params">(<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"><span class="comment">//返回一个定长的随机纯大写字母字符串(只包含大小写字母)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">MixString</span><span class="params">(<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"><span class="comment">//返回一个定长的随机纯字母字符串(只包含大小写字母)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">number</span><span class="params">(<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">String</span><span class="params">(<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"><span class="comment">//返回一个定长的随机字符串(只包含大小写字母、数字)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">toFixdLengthString</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> fixdlenth)</span></span></span><br><span class="line"><span class="function"><span class="comment">//根据数字生成一个定长的字符串，长度不够前面补0</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">toFixdLengthString</span><span class="params">(<span class="keyword">long</span> num, <span class="keyword">int</span> fixdlenth)</span></span></span><br><span class="line"><span class="function"><span class="comment">//根据数字生成一个定长的字符串，长度不够前面补0</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">UpperString</span><span class="params">(<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"><span class="comment">//返回一个定长的随机纯小写字母字符串(只包含大小写字母)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">ZeroString</span><span class="params">(<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"><span class="comment">//生成一个定长的纯0字符串</span></span></span><br></pre></td></tr></table></figure></div>


<h1 id="RegUtil正则相关的工具类"><a href="#RegUtil正则相关的工具类" class="headerlink" title="RegUtil正则相关的工具类"></a>RegUtil正则相关的工具类</h1><h2 id="常量方法-11"><a href="#常量方法-11" class="headerlink" title="常量方法"></a>常量方法</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMatche</span><span class="params">(java.lang.String str, java.lang.String reg)</span></span></span><br><span class="line"><span class="function"><span class="comment">//判断字符串str是否符合正则表达式reg</span></span></span><br></pre></td></tr></table></figure></div>


<h1 id="SecUtil安全相关的工具类"><a href="#SecUtil安全相关的工具类" class="headerlink" title="SecUtil安全相关的工具类"></a>SecUtil安全相关的工具类</h1><h2 id="常量方法-12"><a href="#常量方法-12" class="headerlink" title="常量方法"></a>常量方法</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> java.lang.<span class="function">String    <span class="title">FileMD5</span><span class="params">(java.io.File file)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">md5</span><span class="params">(java.lang.String password)</span></span></span><br></pre></td></tr></table></figure></div>


<h1 id="StreamUtil-Stream相关的工具类"><a href="#StreamUtil-Stream相关的工具类" class="headerlink" title="StreamUtil-Stream相关的工具类"></a>StreamUtil-Stream相关的工具类</h1><h2 id="常量方法-13"><a href="#常量方法-13" class="headerlink" title="常量方法"></a>常量方法</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> java.io.<span class="function">InputStream <span class="title">byte2InputStream</span><span class="params">(<span class="keyword">byte</span>[] b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">byte</span>[]  <span class="title">inputStream2Byte</span><span class="params">(java.io.InputStream inStream)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">byte</span>[]  <span class="title">stream2Byte</span><span class="params">(java.io.InputStream is)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">streamSaveAsFile</span><span class="params">(java.io.InputStream is, java.io.File outfile)</span></span></span><br><span class="line"><span class="function"><span class="comment">//将流另存为文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String <span class="title">streamToString</span><span class="params">(java.io.InputStream in)</span></span></span><br><span class="line"><span class="function"><span class="comment">//Read an input stream into a string</span></span></span><br></pre></td></tr></table></figure></div>

<h1 id="StringUtil字符串相关的工具类"><a href="#StringUtil字符串相关的工具类" class="headerlink" title="StringUtil字符串相关的工具类"></a>StringUtil字符串相关的工具类</h1><h2 id="常量方法-14"><a href="#常量方法-14" class="headerlink" title="常量方法"></a>常量方法</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ChineseLength</span><span class="params">(java.lang.String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取一个字符串中中文字符的个数</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countSubStr</span><span class="params">(java.lang.String string, java.lang.String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取字符串str在String中出现的次数</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countSubStrReg</span><span class="params">(java.lang.String string, java.lang.String reg)</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取符合reg正则表达式的字符串在String中出现的此时</span></span></span><br><span class="line"><span class="function">java.lang.String   <span class="title">cpDetector</span><span class="params">(java.lang.String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取字符串的编码</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">formatFloat</span><span class="params">(<span class="keyword">float</span> f, java.lang.String format)</span></span></span><br><span class="line"><span class="function"><span class="comment">//格式化一个float</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">full2Half</span><span class="params">(java.lang.String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">//全角字符变半角字符</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">GBToUnicode</span><span class="params">(java.lang.String input)</span></span></span><br><span class="line"><span class="function"><span class="comment">//GBK转换成Unicode字符集</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">getHideEmailPrefix</span><span class="params">(java.lang.String email)</span></span></span><br><span class="line"><span class="function"><span class="comment">//隐藏邮件地址前缀。</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">getLimitLengthString</span><span class="params">(java.lang.String str, <span class="keyword">int</span> len, java.lang.String symbol)</span></span></span><br><span class="line"><span class="function"><span class="comment">//截取字符串　超出的字符用symbol代替</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getStringLen</span><span class="params">(java.lang.String SrcStr)</span></span></span><br><span class="line"><span class="function"><span class="comment">//取得字符串的实际长度（考虑了汉字的情况）</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">html</span><span class="params">(java.lang.String content)</span></span></span><br><span class="line"><span class="function"><span class="comment">//HTML标签转义方法 —— java代码库</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isABC</span><span class="params">(java.lang.String src)</span></span></span><br><span class="line"><span class="function"><span class="comment">//判断是否纯字母组合</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isChinese</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"><span class="comment">//判断是否是中文</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isChinese</span><span class="params">(java.lang.String strName)</span></span></span><br><span class="line"><span class="function"><span class="comment">//完整的判断中文汉字和符号</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEmail</span><span class="params">(java.lang.String email)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(java.lang.String s)</span></span></span><br><span class="line"><span class="function"><span class="comment">//判断是否是空字符串 null和"" 都返回 true</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isFloatNumeric</span><span class="params">(java.lang.String src)</span></span></span><br><span class="line"><span class="function"><span class="comment">//判断是否浮点数字表示</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isIn</span><span class="params">(java.lang.String substring, java.lang.String[] source)</span></span></span><br><span class="line"><span class="function"><span class="comment">//判断字符串数组中是否包含某字符串元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isInteger</span><span class="params">(java.lang.String str)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMessyCode</span><span class="params">(java.lang.String strName)</span></span></span><br><span class="line"><span class="function"><span class="comment">//判断是否是乱码</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNumeric</span><span class="params">(java.lang.String src)</span></span></span><br><span class="line"><span class="function"><span class="comment">//判断是否数字表示</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNumericString</span><span class="params">(java.lang.String src)</span></span></span><br><span class="line"><span class="function"><span class="comment">//判断是否数字表示</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">joinString</span><span class="params">(java.util.List array, java.lang.String symbol)</span></span></span><br><span class="line"><span class="function"><span class="comment">//把string array or list用给定的符号symbol连接成一个字符串</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">joinString</span><span class="params">(java.lang.String[] array, java.lang.String symbol)</span></span></span><br><span class="line"><span class="function"><span class="comment">//把string array or list用给定的符号symbol连接成一个字符串</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">left</span><span class="params">(java.lang.String input, <span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"><span class="comment">//截取字符串左侧指定长度的字符串</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">listToStringSlipStr</span><span class="params">(java.util.List list, java.lang.String slipStr)</span></span></span><br><span class="line"><span class="function"><span class="comment">//将list 用传入的分隔符组装为String</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">middle</span><span class="params">(java.lang.String input, <span class="keyword">int</span> index, <span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"><span class="comment">//从指定位置开始截取指定长度的字符串</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.Map&lt;java.lang.String,java.lang.String&gt;    <span class="title">parseQuery</span><span class="params">(java.lang.String query, <span class="keyword">char</span> split1, <span class="keyword">char</span> split2, java.lang.String dupLink)</span></span></span><br><span class="line"><span class="function"><span class="comment">//解析字符串返回map键值对(例：a=1&amp;b=2 =&gt; a=1,b=2)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.util.List&lt;java.lang.String&gt;    <span class="title">parseString2ListByCustomerPattern</span><span class="params">(java.lang.String pattern, java.lang.String src)</span></span></span><br><span class="line"><span class="function"><span class="comment">//根据指定的字符把源字符串分割成一个数组</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">repeat</span><span class="params">(java.lang.String src, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"><span class="comment">//repeat - 通过源字符串重复生成N次组成新的字符串。</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">replaceAll</span><span class="params">(java.lang.String s, java.lang.String sf, java.lang.String sb)</span></span></span><br><span class="line"><span class="function"><span class="comment">//存文本替换</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">replaceBlank</span><span class="params">(java.lang.String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">//页面中去除字符串中的空格、回车、换行符、制表符</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">replaceBracketStr</span><span class="params">(java.lang.String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">//全角括号转为半角</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">requals</span><span class="params">(java.lang.String str1, java.lang.String str2)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">right</span><span class="params">(java.lang.String input, <span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"><span class="comment">//截取字符串右侧指定长度的字符串</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">double</span>  <span class="title">SimilarDegree</span><span class="params">(java.lang.String str1, java.lang.String str2)</span></span></span><br><span class="line"><span class="function"><span class="comment">//字符串相似度比较(速度较快)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">double</span>  <span class="title">SimilarityRatio</span><span class="params">(java.lang.String str1, java.lang.String str2)</span></span></span><br><span class="line"><span class="function"><span class="comment">//字符串相似度比较(速度较快)</span></span></span><br><span class="line"><span class="function">java.lang.String   <span class="title">SimpleEncoding</span><span class="params">(java.lang.String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取字符串的编码</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">string2Unicode</span><span class="params">(java.lang.String string)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">subStringNotEncode</span><span class="params">(java.lang.String subject, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"><span class="comment">//讲字符串截取到指定长度size+...的形式</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">subStrNotEncode</span><span class="params">(java.lang.String subject, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"><span class="comment">//截取字符，不转码</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">trimPunct</span><span class="params">(java.lang.String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">//删除所有的标点符号</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">unicode2String</span><span class="params">(java.lang.String unicode)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">UnicodeToGB</span><span class="params">(java.lang.String input)</span></span></span><br><span class="line"><span class="function"><span class="comment">//Unicode转换成GBK字符集</span></span></span><br></pre></td></tr></table></figure></div>


<h1 id="SysUtil系统相关的工具类"><a href="#SysUtil系统相关的工具类" class="headerlink" title="SysUtil系统相关的工具类"></a>SysUtil系统相关的工具类</h1><h2 id="常量字段-1"><a href="#常量字段-1" class="headerlink" title="常量字段"></a>常量字段</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> java.lang.String    STR_HOSTNAME</span><br><span class="line"><span class="keyword">static</span> java.lang.String    STR_IP</span><br></pre></td></tr></table></figure></div>

<h1 id="ValidUtil字符串相关的工具类"><a href="#ValidUtil字符串相关的工具类" class="headerlink" title="ValidUtil字符串相关的工具类"></a>ValidUtil字符串相关的工具类</h1><h2 id="常量方法-15"><a href="#常量方法-15" class="headerlink" title="常量方法"></a>常量方法</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(java.util.Collection col)</span></span></span><br><span class="line"><span class="function"><span class="comment">//判断集合的有效性</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(java.lang.Object obj)</span></span></span><br><span class="line"><span class="function"><span class="comment">//判断一个对象是否为空</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(java.lang.Object[] arr)</span></span></span><br><span class="line"><span class="function"><span class="comment">//判断数组是否有效</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(java.lang.String src)</span></span></span><br><span class="line"><span class="function"><span class="comment">//判断字符串有效性</span></span></span><br></pre></td></tr></table></figure></div>


<h1 id="WebUtilWeb相关的工具类"><a href="#WebUtilWeb相关的工具类" class="headerlink" title="WebUtilWeb相关的工具类"></a>WebUtilWeb相关的工具类</h1><h2 id="常量方法-16"><a href="#常量方法-16" class="headerlink" title="常量方法"></a>常量方法</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> java.lang.<span class="function">String    <span class="title">escape</span><span class="params">(java.lang.String src)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">getParamValue</span><span class="params">(java.lang.String url, java.lang.String paramName)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>    <span class="title">main</span><span class="params">(java.lang.String[] args)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>    <span class="title">print</span><span class="params">(javax.servlet.http.HttpServletRequest request)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">removeParam</span><span class="params">(java.lang.String url, java.lang.String... paramNames)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">removeParam</span><span class="params">(java.lang.String url, java.lang.String paramName)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">setParam</span><span class="params">(java.lang.String url, java.lang.String paramName, java.lang.String paramValue)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">unescape</span><span class="params">(java.lang.String src)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> java.lang.String    <span class="title">urlJoin</span><span class="params">(java.net.URL url, java.lang.String locationHeader)</span></span></span><br></pre></td></tr></table></figure></div>


<h1 id="ZIPUtil-zip相关的工具类"><a href="#ZIPUtil-zip相关的工具类" class="headerlink" title="ZIPUtil-zip相关的工具类"></a>ZIPUtil-zip相关的工具类</h1><h2 id="常量方法-17"><a href="#常量方法-17" class="headerlink" title="常量方法"></a>常量方法</h2><pre><code class="java"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>    <span class="title">deCompress</span><span class="params">(java.io.File file, java.lang.String dest)</span></span>
<span class="function"><span class="comment">//文档压缩</span></span>
<span class="function"><span class="keyword">static</span> <span class="keyword">void</span>    <span class="title">unCompress</span><span class="params">(java.io.File source, java.lang.String path)</span></span>
<span class="function"><span class="comment">//文档解压</span></span>
<span class="function"><span class="keyword">static</span> <span class="keyword">void</span>    <span class="title">zipFile</span><span class="params">(java.io.File inFile, java.util.zip.ZipOutputStream zos, java.lang.String dir)</span></span></code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/allwayz" target="_blank" rel="noopener">Allwayz</a><br><a href="/download/JavaToolClasses.zip">点击此处，下载源码</a></p>
]]></content>
  </entry>
  <entry>
    <title>how to write a essay</title>
    <url>/2019/12/26/how-to-write-a-essay/</url>
    <content><![CDATA[<blockquote>
<p>Everone can write a paper, but how to write a good academic paper?</p>
</blockquote>
<a id="more"></a>

<table>
    <tbody>
        <tr>
            <td style="vertical-align: top" width="20%"><strong>目的</strong></td>
            <td style="vertical-align: top" width="30%"><strong>介绍</strong></td>
            <td style="vertical-align: top" width="50%"><strong>范文</strong></td>
        </tr>
        <tr>
            <td style="vertical-align: top" width="20%">stating information that is not “common knowledge”</td>
            <td style="vertical-align: top" width="30%">
                <ul>
                    <li>[use relevant style guide’s in-text citation format]</li>
                    <li>As [Author] indicated/ stated/ discovered</li>
                    <li>According to [Author],</li>
                </ul>
            </td>
            <td style="vertical-align: top" width="50%">
                <ul>
                    <li>As Smith indicated in a 2010 study . . .</li>
                    <li>According to Marks and Peters . . .</li>
                </ul>
            </td>
        </tr>
        <tr>
            <td style="vertical-align: top" width="20%">drawing conclusions, making inferences, or suggesting implications based on specific data</td>
            <td style="vertical-align: top" width="30%">
                <ul>
                    <li>suggests</li>
                    <li>as evidenced/ suggested/ indicated by</li>
                    <li>based on</li>
                    <li>can be seen/ observed when</li>
                    <li>as seen in</li>
                    <li>which is made apparent when</li>
                    <li>is demonstrated by/ through/ when</li>
                    <li>hinges on</li>
                </ul>
            </td>
            <td style="vertical-align: top" width="50%">
                <ul>
                    <li>The strong negative correlation suggests that . . .</li>
                    <li>As evidenced/ suggested/ indicated by their enlarged adrenal glands, patients with . . .</li>
                    <li>Based on self-reported survey results . . .</li>
                    <li>This phenomenon can be seen/ observed when wind speeds exceed . . .</li>
                    <li>As seen in the high recurrence rates of . . .</li>
                    <li>The causal link between A and B, which is made apparent when B triggers . . .</li>
                    <li>The efficacy of chocolate as a cure for unhappiness is demonstrated by survey results highlighted in . . .</li>
                    <li>This conclusion hinges on . . .</li>
                </ul>
            </td>
        </tr>
        <tr>
            <td style="vertical-align: top" width="20%">clarifying a prior statement</td>
            <td style="vertical-align: top" width="30%">
                <ul>
                    <li>for example</li>
                    <li>for instance</li>
                    <li>by way of illustration</li>
                    <li>as an example</li>
                    <li>to clarify</li>
                    <li>to explain further</li>
                    <li>namely</li>
                    <li>to be specific</li>
                    <li>that is,</li>
                    <li>in other words,</li>
                </ul>
            </td>
            <td style="vertical-align: top" width="50%">
                <ul>
                    <li>This occurrence is rare. For example, only one in twenty . . .</li>
                    <li>It is unlikely that current population growth rates are sustainable. For instance, several major coastal cities are already suffering from . . .</li>
                    <li>By way of illustration, less than 20% of new matriculants feel prepared for . . .</li>
                    <li>As an example, when a country faces economic recession, polls indicate that over 80% of the population supports . . .</li>
                    <li>To clarify, not all government-funded facilities provide . . .</li>
                    <li>To explain further, large doses of Agent O can trigger . . .</li>
                    <li>Millennials prefer flexible work conditions, namely the ability to work remotely.</li>
                    <li>To be specific, bull markets can . . .</li>
                    <li>That is, significant and sudden drops in temperature can . . .</li>
                    <li>In other words, short bursts of high-intensity ultrasound can . . .</li>
                </ul>
            </td>
        </tr>
        <tr>
            <td style="vertical-align: top" width="20%">identifying representative examples of a category</td>
            <td style="vertical-align: top" width="30%">
                <ul>
                    <li>for example/ instance</li>
                    <li>such as*</li>
                    <li>e.g.</li>
                    <li>one/ another example</li>
                    <li>like*</li>
                    <li>excluding</li>
                    <li>including</li>
                    <li>an example being</li>
                </ul>
                <p>*NOTE: “such as” and “like” have two different uses. “Such as” introduces a specific example that is part of a category. “Like” suggests the listed items are similar to, but not included in, the topic discussed.
            </td>
            <td style="vertical-align: top" width="50%">
                <ul>
                    <li>Typhoons are considered acts of God, for example/ instance.</li>
                    <li>The island is home to many native carnivorous plants, such as Venus flytraps.</li>
                    <li>The only known bioluminescent vertebrates are fish (e.g. the anglerfish and lantern fish).</li>
                    <li>One/ another example of this exception is . . .</li>
                    <li>I prefer outdoor sports like mountain climbing because they allow me to enjoy nature while exercising.</li>
                    <li>All mammals, excluding humans, stop drinking milk at a young age.</li>
                    <li>All stars, including our sun, . . .</li>
                    <li>Hawks feast on rodents, an example being . . .</li>
                </ul>
            </td>
        </tr>
        <tr>
            <td style="vertical-align: top" width="20%">distinguishing concepts</td>
            <td style="vertical-align: top" width="30%">
                <ul>
                    <li>in a similar case</li>
                    <li>unlike the case of</li>
                    <li>in the same way</li>
                    <li>as a case in point</li>
                    <li>in a typical situation</li>
                    <li>in a normal scenario</li>
                </ul>
            </td>
            <td style="vertical-align: top" width="50%">
                <ul>
                    <li>In a similar case, a male patient with arthritis . . .</li>
                    <li>Unlike a single-blind study, a double-blind study reduces the risk of observer bias.</li>
                    <li>Redundancy and wordiness can be reduced in the same way: through careful editing.</li>
                    <li>As a case in point, let&#8217;s look at the situation in which . . .</li>
                    <li>In a typical situation, marsupials would . . .</li>
                    <li>In a normal scenario, cortisol suppressant effects . . .</li>
                </ul>
            </td>
        </tr>
        <tr>
            <td style="vertical-align: top" width="20%">emphasizing a point by highlighting a specific situation</td>
            <td style="vertical-align: top" width="30%">
                <ul>
                    <li>for example</li>
                    <li>indeed</li>
                    <li>in fact</li>
                    <li>notably</li>
                    <li>markedly</li>
                    <li>as a case in point</li>
                </ul>
            </td>
            <td style="vertical-align: top" width="50%">
                <ul>
                    <li>Nocturnal marsupials, for example, have . . .</li>
                    <li>Indeed, since the World Health Organization declared an end to the Ebola outbreak in the Democratic Republic of the Congo . . .</li>
                    <li>Ice-free habitats around Antarctica, in fact, have . . .</li>
                    <li>High carbon steel alloys, notably, undergo a transformation when . . .</li>
                    <li>Markedly, the deserts irregular rainfall levels have . . .</li>
                    <li>As a case in point, the last known male northern white rhinoceros . . .</li>
                </ul>
            </td>
        </tr>
    </tbody>
</table>

]]></content>
  </entry>
  <entry>
    <title>个人博客搭建指南</title>
    <url>/2019/12/11/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<blockquote>
<p>市面上有很多博客框架和平台可以选择。 我这里选择的是Hexo的框架。</p>
</blockquote>
<a id="more"></a>


<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ul>
<li><a href="#node">安装 Node.js</a></li>
<li><a href="#cnpm">安装 cnpm</a></li>
<li><a href="#hexo">安装 Hexo</a></li>
<li><a href="#blogForder">创建博客文件夹</a></li>
<li><a href="#hexoInit">生成新博客</a></li>
<li><a href="#githubG">创建GitHub个人仓库</a></li>
<li><a href="#gitPlug">安装 Git</a></li>
<li><a href="#hexoD_Config">配置部署文件</a></li>
<li><a href="#hexoD">发布文章</a></li>
</ul>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>市面上有很多博客框架和平台可与选择这里选择的是Hexo的框架。<br>Hexo是基于Node.js进行开发博客平台，所以第一步是安装Node.js工具。</p>
<p><span id = "node">通过node的官方网址来下载工具。<a href="https://nodejs.org" target="_blank" rel="noopener">https://nodejs.org</a> </span><br>建议选择长期支持版（LTS)</p>
<p>安装的过程非常简单，跟着下一步一步一步走就可以了。</p>
<p>安装完成后会有两个组件分别是<strong>Node.js</strong>和<strong>npm</strong></p>
<p>想要确保node是否安装好 可以在命令行中输入 <code>node -v</code></p>
<p>同样可以用过<code>npm -v</code>来确认包管理器的版本</p>
<p>Windos系统： <kbd>Win</kbd> + <kbd>R</kbd> 运行cmd命令行</p>
<p>MacOS： <kbd>Command</kbd> + <kbd>Space</kbd> 运行Terminal</p>
<p>因为Hexo是基于Node.js来生成的所以准备步骤到这边已经可以了，接下来开始搭建博客框架。</p>
<h2 id="搭建方法"><a href="#搭建方法" class="headerlink" title="搭建方法"></a>搭建方法</h2><p><span id="cnpm">国内因为镜像源速度很慢，所以利用npm安装cnpm来加快安装速度。</span></p>
<pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><p>跑完进度条之后可以查看cnpm版本。</p>
<pre><code>cnpm -v</code></pre><p><span id="hexo">接下来就利用cnpm来安装Hexo</span></p>
<pre><code>cnpm install -g hexo-cli</code></pre><p>跑完进度条之后验证是否安装好以及查一下版本号</p>
<pre><code>hexo -v</code></pre><hr>
<p>安装好了之后就可以去配置博客环境了。</p>
<p><span id="blogForder">先新建一个空文件夹，比如路径是：</span><br>        D:\Blog</p>
<p><span id="hexoInit">使用 &gt;_ cd 命令进入创建空文件夹的路径，然后使用hexo生成一个博客</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">cd D:\Blog &#x2F;&#x2F;进入文件夹</span><br><span class="line">Hexo init &#x2F;&#x2F;使用Hexo初始化博客</span><br></pre></td></tr></table></figure></div>
<p>现在已经可以使用这个博客了</p>
<pre><code>hexo s</code></pre><p>现在这个博客是跑在本地机器上的，端口默认是4000</p>
<p>进入浏览器输入 <a href="localhost:4000">localhost:4000</a> 就可以访问了。</p>
<ul>
<li>如何新建文章呢？</li>
</ul>
<pre><code>hexo new “博客名称”</code></pre><p>新的一篇博客默认路径是： <code>Blog/source/_posts/博客名称.md</code></p>
<p>通过cd来进入目录</p>
<p>博客文章编辑好之后需要生成一下hexo博客</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">hexo g &#x2F;&#x2F;重新生成博客</span><br></pre></td></tr></table></figure></div>

<h2 id="放入远端"><a href="#放入远端" class="headerlink" title="放入远端"></a>放入远端</h2><p>####我这里选择把博客部署到<code>GitHub</code>中去。</p>
<p><span id="githubG">在<code>GitHub</code>中新建一个储存库，名字命名为<code>UserName.github.io</code>。</span></p>
<p><strong>注意</strong>：这里明明的UserName一定是你<code>GitHub</code>的昵称。</p>
<p><span id="gitPlug">回到命令行安装git插件</span></p>
<pre><code>cnpm install -- save hexo-deployer-git //如果出现警告可以不用管</code></pre><p><span id="hexoD_Config">####这时候需要配置一下部署</span><br>打开 <code>Blog/_config.yml</code> 找到最底部的<code>Deployment</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Deployment</span></span><br><span class="line"><span class="section">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">type:</span><br></pre></td></tr></table></figure></div>

<p><strong>更改为</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Deployment</span></span><br><span class="line"><span class="section">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: //刚刚仓库的完整地址</span><br><span class="line">branch： master</span><br></pre></td></tr></table></figure></div>

<p><span id="hexoD">修改好<code>config</code>文件之后就可以部署到远端了。</span></p>
<pre><code>hexo d</code></pre><p>可能需要输入GitHub的账号和密码，输入就可以了。</p>
<p>直接把我们仓库的名字拿出来到浏览器中访问，个人博客的搭建就成功了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说没有遇到什么困难的地方，markdown语法有很强大的功能等待我去挖掘。有什么问题可以在底下给我留言。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/allwayz" target="_blank" rel="noopener">Allwayz</a></p>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
</search>
